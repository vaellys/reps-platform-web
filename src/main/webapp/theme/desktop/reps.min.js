var REPS = {
	keyCode: {
		ENTER: 13, ESC: 27, END: 35, HOME: 36,
		SHIFT: 16, TAB: 9,
		LEFT: 37, RIGHT: 39, UP: 38, DOWN: 40,
		DELETE: 46, BACKSPACE:8
	},
	eventType: {
		pageClear:"pageClear",	// 用于重新ajaxLoad、关闭nabTab, 关闭dialog时，去除xheditor等需要特殊处理的资源
		resizeGrid:"resizeGrid"	// 用于窗口或dialog大小调整时表格的变化
	},
	isOverAxis: function(x, reference, size) {
		//Determines when x coordinate is over "b" element axis
		return (x > reference) && (x < (reference + size));
	},
	isOver: function(y, x, top, left, height, width) {
		//Determines when x, y coordinates is over "b" element
		return this.isOverAxis(y, top, height) && this.isOverAxis(x, left, width);
	},
	
	pageInfo: {pageNum:"pageNum", numPerPage:"numPerPage", orderField:"orderField", orderDirection:"orderDirection"},
	statusCode: {ok:200, fail:205, error:500, timeout:504, warn:100,nologin:203,redirect:301},
	domain: "",
	ui:{sbar:true},
	frag:{}, //page fragment
	_msg:{}, //alert message
	_set:{
		loginUrl:"", //session timeout
		loginTitle:"", //if loginTitle open a login dialog
		debug:false
	},
	msg:function(key, args){
		var _format = function(str,args) {
			args = args || [];
			var result = str || "";
			for (var i = 0; i < args.length; i++){
				result = result.replace(new RegExp("\\{" + i + "\\}", "g"), args[i]);
			}
			return result;
		}
		return _format(this._msg[key], args);
	},
	debug:function(msg){
		if (this._set.debug) {
			if (typeof(console) != "undefined") console.log(msg);
			else alert(msg);
		}
	},
	
	/*
	 * json to string use
	 */
	obj2str:function(o) {
		var r = [];
		if(typeof o =="string") return "\""+o.replace(/([\'\"\\])/g,"\\$1").replace(/(\n)/g,"\\n").replace(/(\r)/g,"\\r").replace(/(\t)/g,"\\t")+"\"";
		if(typeof o == "object"){
			if(!o.sort){
				for(var i in o)
					r.push(i+":"+REPS.obj2str(o[i]));
				if(!!document.all && !/^\n?function\s*toString\(\)\s*\{\n?\s*\[native code\]\n?\s*\}\n?\s*$/.test(o.toString)){
					r.push("toString:"+o.toString.toString());
				}
				r="{"+r.join()+"}"
			}else{
				for(var i =0;i<o.length;i++) {
					r.push(REPS.obj2str(o[i]));
				}
				r="["+r.join()+"]"
			}
			return r;
		}
		return o.toString();
	},
	/*
	 * use
	 */
	jsonEval:function(data) {
		try{
			if ($.type(data) == 'string')
				return eval('(' + data + ')');
			else return data;
		} catch (e){
			return {};
		}
	},
	
	/*
	 * use
	 */
	ajaxError:function(xhr, ajaxOptions, thrownError){
		/*if (messager) {
			messager.error("<div>Http status: " + xhr.status + " " + xhr.statusText + "</div>" 
				+ "<div>ajaxOptions: "+ajaxOptions + "</div>"
				+ "<div>thrownError: "+thrownError + "</div>"
				+ "<div>"+xhr.responseText+"</div>");
		} else {
			alert("Http status: " + xhr.status + " " + xhr.statusText + "\najaxOptions: " + ajaxOptions + "\nthrownError:"+thrownError + "\n" +xhr.responseText);
		}*/
		
		if(messager){
			messager.error($.regional.messager.ajaxError);
		}else{
			alert($.regional.messager.ajaxError);
		}
		if(window.console){
			console.log("<div>Http status: " + xhr.status + " " + xhr.statusText + "</div>" 
					+ "<div>ajaxOptions: "+ajaxOptions + "</div>"
					+ "<div>thrownError: "+thrownError + "</div>"
					+ "<div>"+xhr.responseText+"</div>");
		}
	},
	/*use**/
	ajaxDone:function(json){
		if(json.statusCode == REPS.statusCode.error) {
			if(json.message && messager) messager.error(json.message);
		} else if (json.statusCode == REPS.statusCode.timeout) {
			if(messager) {
				messager.error(json.message);
			}
		} else {
			if(json.message && messager) messager.correct(json.message);
		};
	},
	getProjectName:function(){
		 var pathName=window.document.location.pathname;
		 return pathName.substring(0,pathName.substr(1).indexOf('/')+1);
	},
	getRootPath:function(){
		var href = window.document.location.href;
		var pathName = window.document.location.pathname;
		var pathNameIndex = href.indexOf(pathName); 
		var localhostPath = href.substring(0,pathNameIndex);
		return (localhostPath + this.getProjectName());  
	},
	reloadDialogJs:function(){
		$('a[target=dialog]').each(function(){
			$(this).off("click").click(function(event){
			var $this = $(this);
			var title = $this.attr('title') || $this.text();
			var rel = $this.attr('rel') || '_blank';
			var url = unescape($this.attr('href'));var options = $this.data('options');
			$.pdialog.open(url, rel, title, options);
			return false;
		  });
		});
	},
	initBaiduEditor:function(id , type ,toolbars){
		if(type){
			var toolsMap={simple:[['undo','redo','bold','italic','underline','fontborder','strikethrough','superscript','subscript','removeformat','formatmatch','forecolor','backcolor','fontfamily','fontsize','pagebreak','source','justifyleft','justifyright','justifycenter','justifyjustify','cleardoc','removeformat','fullscreen']],complex:[['undo','redo','bold','italic','underline','fontborder','spechars','snapscreen','simpleupload','wordimage','strikethrough','superscript','subscript','fullscreen','parenthese','fontfamily','fontsize','|','link','unlink','inserttable','deletetable','insertparagraphbeforetable','insertrow','deleterow','insertcol','deletecol','mergecells','mergeright','mergedown','splittocells','splittorows','splittocols','indent','justifyleft','justifycenter','justifyright','justifyjustify','forecolor','backcolor','|','touppercase','tolowercase','attachment','music','insertvideo','map','cleardoc','removeformat','gmap','rowspacingtop','rowspacingbottom','lineheight']]};
			toolbars = toolsMap[type];
		}
		var myWidth=$("#"+id+"").width();
		var editor=new UE.ui.Editor({initialFrameWidth:myWidth,labelMap:{'parenthese':'xxx'},wordCount:false,elementPathEnabled:false,autoHeightEnabled:false,toolbars:toolbars});
		editor.render(id);
	},
	overFileSizeFlag : 0,
	containFileType : false,
	fileChange : function(target,type,size) {
		var jThis = this;
		var isIE = /msie/i.test(navigator.userAgent) && !window.opera; 
	    var fileSize = 0;
	    var fileName;
	    if(isIE && !target.files) {      
	      fileSize = 0;
	      jThis.containFileType = true;
	    }else{     
	      fileSize = target.files[0].size;
	      fileName = target.files[0].name;
	    }    
	    
	    var flagSize = size > 0 ? size : 2 * 1024;
	     if(fileSize > flagSize * 1024 * 1024){   
	    	 jThis.overFileSizeFlag = flagSize;
	     }
	     if(fileName && !isIE){
	    	 var fileType = fileName.substring(fileName.lastIndexOf(".")+1);
	    	 if(type != null && '' != type && undefined != type && 'null' != type){
	    		 var typeArray = type.split(",");
	    		 if(typeArray){
	    			 typeArray.forEach(function(i,j){
	    				 if(i === fileType){
	    					 jThis.containFileType = true;
	    					 return false;
	    				 }
	    			 });
	    		 }
	    	 }else{
	    		 jThis.containFileType = true;
	    	 }
	     }
	},
	textEnterExec:function(){
		var flagOverWords = false;
		$("textarea").each(function(){
			var $this = $(this);
			var height = $this.height();
			var maxlength = $this.attr("maxlength") || 0;
			var val = $this.val();
			var enterReg = /\n/g;
			var enters = val.match(enterReg);
			if(enters != null && val != null && (val.length + enters.length) > maxlength && maxlength > 0){
				if($this.next("div").length <= 0 && $this.next("div").html() != $.regional.messager.overWordsForEnter){
					var html = "<div style='color:red;margin-left:2px;height:"+height+"px;line-height:"+height+"px;'>"+$.regional.messager.overWordsForEnter+maxlength+$.regional.messager.showOverChar+"</div>";
					$this.after(html);
				}
				if($this.next("div").length > 0 && $this.next("div").is(":hidden")){
					$this.next("div").show();
				}
				flagOverWords = true;
				return false;
			}else{
				if($this.next("div").length > 0 && $this.next("div").is(":visible")){
					$this.next("div").hide();
				}
			}
		});
		return flagOverWords;
	},
	reloadAjaxGrid:function(id,url){
		$.ajax({
			type:"POST",
			url:url,
			cache: false,
			dataType:"html",
			success:function(data){
					var newdata=$(data).find("#"+id+" tbody").html();
					var $newTbody=$("<table>"+newdata+"</table>");
					var $tbody=$(".gridTbody tbody");
                	var $thead=$(".gridThead thead");
                	//
				    $thead.find("tr:first th").each(function(i){
                		$newTbody.find("tr:first td:eq("+i+")").attr("style",$(this).attr("style"));
                	});
                	var tds = $newTbody.find("td");
                	tds.each(function(){
                		$(this).html("<div><span>"+$(this).html()+"</span></div>");
                	});
                	$(".gridTbody tbody").html($newTbody.find("tbody").html());
                	var $trs = $(".gridTbody tbody").find('>tr');
                	$trs.hoverClass().each(function(i){
              	  	var $tr = $(this);
              	  	$tr.click(function(){
    					$trs.filter(".selected").removeClass("selected");
    					$tr.addClass("selected");
    				});
                });
			}
		});
	},
	addTrToGrid:function(id,json){
		if(typeof json == 'string'){
			json = eval("("+json+")");
		}
		var $parentDiv=$("#"+id);
		var $tbody=$parentDiv.find(".gridTbody tbody");
    	var $thead=$parentDiv.find(".gridThead thead");
    	
    	var flagNoValue = false;
    	if($tbody.find("tr:first td:first").find("span").html() == $.regional.compare.novalue){
    		flagNoValue = true;
    	}
    	
    	var $appendTr = $("<tr></tr>");
    	if(flagNoValue){
    		$tbody.find("tr").remove();
    		$thead.find("tr:first th").each(function(i){
        		var key = $(this).find("div").html();
        		var val = json[key];
        		$appendTr.append("<td style='"+$(this).attr("style")+"'><div><span>"+val+"</span></div></td>");
        	});
    	}else{
    		$thead.find("tr:first th").each(function(i){
    			var key = $(this).find("div").html();
        		var val = json[key];
        		$appendTr.append("<td><div><span>"+val+"</span></div></td>");
        	});
    	}
    	
    	$tbody.append($appendTr);
    	
    	var $trs = $tbody.find(">tr");
    	$trs.hoverClass().each(function(i){
	  	  	var $tr = $(this);
	  	  	$tr.click(function(){
				$trs.filter(".selected").removeClass("selected");
				$tr.addClass("selected");
			});
    	});
    	
	},
	getEditorContentLength:function(id){
		var editor = UE.getEditor(id,{wordCount:false,autoHeightEnabled:false});
		return editor.getContentLength(true);
	},
	ajaxJavascriptTagFlag:function(html){
		var $script =  $(html);
		if($script[0].nodeName == "SCRIPT"){
			$("body").append(html);
			return true;
		}
		return false;
	},
	ajaxJsonFlag:function(json){
		if(json.statusCode == REPS.statusCode.nologin){
			return true;
		}
		return false;
	}
};

String.prototype.replaceAll = function(s1,s2){
	　return this.replace(new RegExp(s1,"gm"),s2);
}

/*ajax操作 use**/
function ajaxUrlCallback(url, confirmMsg,callback,redirect,okcall) {
	//$this.trigger(REPS.eventType.pageClear);
	var _submitFn = function(){
		$.ajax({
			type:'GET',
			url:url,
			dataType:"json",
			cache: false,
			success: callback || function(json){
				if(REPS.ajaxJsonFlag(json)){
					isRepsFormSubmitRepeat = false;
					return;
				}
				if(json.statusCode==REPS.statusCode.error){
					if(json.message&&messager)messager.error(json.message);
				}else if(json.statusCode==REPS.statusCode.timeout){
					if(json.message&&messager){
						messager.info(json.message);}
				}else if (json.statusCode==REPS.statusCode.fail){
					if(json.message&&messager){
						messager.info(json.message);
					}
				}else if(json.statusCode==REPS.statusCode.warn){
					if(json.message&&messager){
						messager.warn(json.message);
					}
				}else{
					if(json.message&&messager) 
						 messager.correct(json.message,{
							 okCall:okcall || function(){ 
								 if(redirect){ location.href=redirect; }
							  }
						 });
					};
			},
			error: REPS.ajaxError
		});
	}
	
	if (confirmMsg) {
		messager.confirm(confirmMsg, {okCall: _submitFn});
	} else {
		_submitFn();
	}
	
	return false;
}
var isRepsFormSubmitRepeat = false;
function ajaxFormSubmit(formId,confirmMsg,callback,redirect,okcall) {
	if(isRepsFormSubmitRepeat){
		return false;
	}
	isRepsFormSubmitRepeat = true;
	var $form = $("#"+formId);
	if (!$form.valid()) {
		isRepsFormSubmitRepeat = false;
		messager.info($.regional.messager.validateNoPass);
		$("input.date.required.error").next("span").css("margin-left","13px");
		return false;
	}
	var _submitFn = function(){
			$.ajax({
				type:'POST',
				url:$form.attr("action"),
				data:$form.serializeArray(),
				dataType:"json",
				cache: false,
				success: callback || function(json){
					if(REPS.ajaxJsonFlag(json)){
						isRepsFormSubmitRepeat = false;
						return;
					}
					if(json.statusCode==REPS.statusCode.error){
						if(json.message&&messager)messager.error(json.message);
						isRepsFormSubmitRepeat = false;
					}else if(json.statusCode==REPS.statusCode.timeout){
						if(json.message&&messager){
							messager.info(json.message);
						}
						isRepsFormSubmitRepeat = false;
					}else if (json.statusCode==REPS.statusCode.fail){
						if(json.message&&messager){
							messager.info(json.message);
						}
						isRepsFormSubmitRepeat = false;
					}else if(json.statusCode==REPS.statusCode.warn){
						if(json.message&&messager){
							messager.warn(json.message);
						}
						isRepsFormSubmitRepeat = false;
					}else{
						if(json.message&&messager){ 
							 messager.correct(json.message,{
								 okCall:okcall || function(){ 
									 if(redirect){ location.href=redirect; }
								  }
							 });
						}
					};
				},
				error: function(xhr, ajaxOptions, thrownError){
					isRepsFormSubmitRepeat = false;
					REPS.ajaxError(xhr,ajaxOptions, thrownError);
				}
			});
	}
	
	try {	
		if (confirmMsg) {
			messager.confirm(confirmMsg, {okCall: _submitFn});
			isRepsFormSubmitRepeat = false;
		} else {
			_submitFn();
		}
	} catch (e) {
		isRepsFormSubmitRepeat = false;
	}
	
	return false;
}

function ajaxGrid(gridId,formId,url,confirmMsg,callback,loadDialogJs) {
	var $form = $("#"+formId);
	if (!$form.valid()) {
		return false;
	}
	
	var _submitFn = function(){
		// before search , make the current page to 1;
		$("input[name=curPageNumber]").val(1); 
		$.ajax({
			type:'POST',
			url:$form.attr("action"),
			data:$form.serializeArray(),
			dataType:"html",
			cache: false,
			success: function(data){
				if(REPS.ajaxJavascriptTagFlag(data)){
					return;
				}
				var newdata=$(data).find("#"+gridId+" tbody").html();
				var $paginationNav = $(data).find(".pagination-nav");
				var totalCount = parseInt($paginationNav.attr("totalCount"));
				$(".pagination-pages > span:eq(1)").html($.regional.pagination.allRecords+totalCount+$.regional.pagination.record);
                var $newTbody=$("<table>"+newdata+"</table>");
                var $tbody=$(".gridTbody tbody");
                var $thead=$(".gridThead thead");
                var $firstTh = $(".gridThead thead tr th:first");
                var $secondTh = $firstTh.next();
                if($secondTh.attr("flagCheckbox") == "checkbox"){
              	  var $checkbox = $secondTh.find("input[name=seqCheck]");
              	  if($checkbox.prop("checked")){
              		  $checkbox.prop("checked",false);
	              }
                }
                var flagSeq = false;
                if($firstTh.attr("flagseq") == "true"){
              	  flagSeq = true;
                }
                var h=0;
                var flagNoValue = false;
                var $newTrs =  $newTbody.find("tbody tr");
                $newTrs.each(function(i){
            		  var $this = $(this);
            		  if($this.find("td:first").html() == $.regional.compare.novalue){
            			  flagNoValue = true;
            		  }
            	});
                if(flagSeq){
	              	  //have sequence
	              	  if(!flagNoValue){
	              		  	$newTrs.each(function(i){
	                  		   var $this = $(this);
			          		   $this.prepend("<td align='center'>"+(i+1)+"</td>");   
		                  	});
	              	  }
                }
                $thead.find("tr:first th").each(function(i){
                	if(!flagNoValue){
                		var style = $newTbody.find("tr:first td:eq("+i+")").attr("style") || "";
                		if(style.indexOf(";") != (style.length-1)){
                			style += ";";
                		}
                		$newTbody.find("tr:first td:eq("+i+")").attr("style",style + $(this).attr("style"));
                	}
                });
                var tds = $newTbody.find("td");
                tds.each(function(){
                	$(this).html("<div><span>"+$(this).html()+"</span></div>");
                });
                $(".gridTbody tbody").html($newTbody.find("tbody").html());
                
                var $trs = $(".gridTbody tbody").find('>tr');
                $trs.hoverClass().each(function(i){
              	  var $tr = $(this);
              	  $tr.click(function(){
    					$trs.filter(".selected").removeClass("selected");
    					$tr.addClass("selected");
    				});
                });
                
                //after grid loaded
                $("input[name=totalRecord]").val(totalCount);
                $(".pagination-nav").attr("totalCount",totalCount);
                $(".pagination-nav").each(function(){
    				var $this = $(this);
    				$this.pagination({
    					targetType:$this.attr("targetType"),
    					rel:$this.attr("rel"),
    					totalCount:totalCount,
    					numPerPage:$this.attr("numPerPage"),
    					pageNumShown:$this.attr("pageNumShown"),
    					form:$this.attr("form")
    				});
    			});
                
                //reload dialog js
                if(loadDialogJs){
                	REPS.reloadDialogJs();
                }
                
			},
			error: REPS.ajaxError
		});
	}
	
	if (confirmMsg) {
		messager.confirm(confirmMsg, {okCall: _submitFn});
	} else {
		_submitFn();
	}
	
	if(null != callback && '' != callback && undefined != callback){
		eval("var callbackFun = " + callback);
		callbackFun();
	}
	
	return false;
}

(function($){
	//set regional
	$.setRegional = function(key, value){
		if (!$.regional) $.regional = {};
		$.regional[key] = value;
	};
	
	$.fn.extend({
		/**
		 * @param {Object} op: {type:GET/POST, url:ajax请求地址, data:ajax请求参数列表, callback:回调函数 }
		 */
		ajaxUrl: function(op){
			var $this = $(this);

			$this.trigger(REPS.eventType.pageClear);
			
			$.ajax({
				type: op.type || 'GET',
				url: op.url,
				data: op.data,
				cache: false,
				success: function(response){
					var json = REPS.jsonEval(response);
					
					if (json.statusCode==REPS.statusCode.error){
						if (json.message) messager.error(json.message);
					} else {
						//$this.html(response).initUI();
						if ($.isFunction(op.callback)) op.callback(response);
					}
					
					if (json.statusCode==REPS.statusCode.timeout){
						if ($.pdialog) $.pdialog.checkTimeout();
						if (navTab) navTab.checkTimeout();
	
						messager.error(json.message || REPS.msg("sessionTimout"), {okCall:function(){
							//REPS.loadLogin();
						}});
					} 
					
				},
				error: REPS.ajaxError,
				statusCode: {
					503: function(xhr, ajaxOptions, thrownError) {
						alert(REPS.msg("statusCode_503") || thrownError);
					}
				}
			});
		},
		loadUrl: function(url,data,callback){
			$(this).ajaxUrl({url:url, data:data, callback:callback});
		},
		/**
		 * adjust component inner reference box height
		 * @param {Object} refBox: reference box jQuery Obj
		 */
		layoutH: function($refBox){
			return this.each(function(){
				var $this = $(this);
				if (! $refBox) $refBox = $this.parents("div.layoutBox:first");
				var iRefH = $refBox.height();
				var iLayoutH = parseInt($this.attr("layoutH"));
				var iH = iRefH - iLayoutH > 50 ? iRefH - iLayoutH : 50;
				if ($this.isTag("table")) {
					$this.removeAttr("layoutH").wrap('<div layoutH="'+iLayoutH+'" style="overflow:auto;height:'+iH+'px"></div>');
				} else {
					$this.height(iH).css("overflow","auto");
				}
			});
		},
		
		gridH: function(gh,flagNoHeight){
			return this.each(function(){
				var $this = $(this);
				var $refBox = $this.parents("div.panel:first");
				var iRefH = $refBox.height();
				if(!gh){
					gh=iRefH;
				}
				var iH = gh-50;//80
				var $panelHeader = $(this).parent().parent().siblings(".panel-header");//substract title height
				if($panelHeader.size() > 0){
					iH -= 27;
				}
				if ($this.isTag("table")) {
					$this.removeAttr("layoutH").wrap('<div style="overflow:auto;height:'+iH+'px"></div>');
				} else {
					if(!flagNoHeight){
						$this.height(iH).css("overflow","auto");
					}
					
				}
			});
		},
		hoverClass: function(className, speed){
			var _className = className || "hover";
			return this.each(function(){
				var $this = $(this), mouseOutTimer;
				$this.hover(function(){
					if (mouseOutTimer) clearTimeout(mouseOutTimer);
					$this.addClass(_className);
				},function(){
					mouseOutTimer = setTimeout(function(){$this.removeClass(_className);}, speed||10);
				});
			});
		},
		focusClass: function(className){
			var _className = className || "textInputFocus";
			return this.each(function(){
				$(this).focus(function(){
					$(this).addClass(_className);
				}).blur(function(){
					$(this).removeClass(_className);
				});
			});
		},
		inputAlert: function(){
			return this.each(function(){
				
				var $this = $(this);
				
				function getAltBox(){
					return $this.parent().find("label.alt");
				}
				function altBoxCss(opacity){
					var position = $this.position();
					return {
						width:$this.width(),
						top:position.top+'px',
						left:position.left +'px',
						opacity:opacity || 1
					};
				}
				if (getAltBox().size() < 1) {
					if (!$this.attr("id")) $this.attr("id", $this.attr("name") + "_" +Math.round(Math.random()*10000));
					var $label = $('<label class="alt" for="'+$this.attr("id")+'">'+$this.attr("alt")+'</label>').appendTo($this.parent());
					
					$label.css(altBoxCss(1));
					if ($this.val()) $label.hide();
				}
				
				$this.focus(function(){
					getAltBox().css(altBoxCss(0.3));
				}).blur(function(){
					if (!$(this).val()) getAltBox().show().css("opacity",1);
				}).keydown(function(){
					getAltBox().hide();
				});
			});
		},
		isTag:function(tn) {
			if(!tn) return false;
			return $(this)[0].tagName.toLowerCase() == tn?true:false;
		},
		/**
		 * 判断当前元素是否已经绑定某个事件
		 * @param {Object} type
		 */
		isBind:function(type) {
			var _events = $(this).data("events");
			return _events && type && _events[type];
		},		
		/**
		 * 输出firebug日志
		 * @param {Object} msg
		 */
		log:function(msg){
			return this.each(function(){
				if (console) console.log("%s: %o", msg, this);
			});
		},
		keySearch:function(url){
				var $this = $(this);
				var id = $this.attr('id');
				$('body').on('keyup','#'+id,function(){
					var val = $this.val();
					$.ajax({
						url:url+'/api/es/search',
						data:{index:'index',type:'organize',keywords:val},
						dataType:'json',
						success:function(data){
							var result = data.data;
							var $keySearch = $('ul.keySearch');
							if(result != null && result.count > 0){
								if($keySearch.length == 0){
									$keySearch = $this.after('<ul class="keySearch"></ul>');
									$keySearch = $('.keySearch');
								}else{
									$keySearch.empty().show();
								}
								for(var i = 0;i < result.list.length;i++){
									var item = result.list[i];
									$keySearch.append('<li data="'+item.id+'" title="'+item.name+'">'+item.name+'</li>');
								}
							}else{
								$keySearch.empty().show();
							}	
						}
					});
				});
				
				$('body').on('click','ul.keySearch li',function(){
					var $this = $(this);
					var data = $this.attr('data');
					$('#'+id).siblings("input").val(data);
					var html = $this.html();
					html = html.replace('<span>','').replace('</span>','');
					$('#'+id).val(html);
					$this.parent().hide();
				});
			}
	});
	
	/**
	 * 扩展String方法
	 */
	$.extend(String.prototype, {
		isPositiveInteger:function(){
			return (new RegExp(/^[1-9]\d*$/).test(this));
		},
		isInteger:function(){
			return (new RegExp(/^\d+$/).test(this));
		},
		isNumber: function(value, element) {
			return (new RegExp(/^-?(?:\d+|\d{1,3}(?:,\d{3})+)(?:\.\d+)?$/).test(this));
		},
		trim:function(){
			return this.replace(/(^\s*)|(\s*$)|\r|\n/g, "");
		},
		startsWith:function (pattern){
			return this.indexOf(pattern) === 0;
		},
		endsWith:function(pattern) {
			var d = this.length - pattern.length;
			return d >= 0 && this.lastIndexOf(pattern) === d;
		},
		replaceSuffix:function(index){
			return this.replace(/\[[0-9]+\]/,'['+index+']').replace('#index#',index);
		},
		trans:function(){
			return this.replace(/&lt;/g, '<').replace(/&gt;/g,'>').replace(/&quot;/g, '"');
		},
		encodeTXT: function(){
			return (this).replaceAll('&', '&amp;').replaceAll("<","&lt;").replaceAll(">", "&gt;").replaceAll(" ", "&nbsp;");
		},
		replaceAll:function(os, ns){
			return this.replace(new RegExp(os,"gm"),ns);
		},
		replaceTm:function($data){
			if (!$data) return this;
			return this.replace(RegExp("({[A-Za-z_]+[A-Za-z0-9_]*})","g"), function($1){
				return $data[$1.replace(/[{}]+/g, "")];
			});
		},
		replaceTmById:function(_box){
			var $parent = _box || $(document);
			return this.replace(RegExp("({[A-Za-z_]+[A-Za-z0-9_]*})","g"), function($1){
				var $input = $parent.find("#"+$1.replace(/[{}]+/g, ""));
				return $input.val() ? $input.val() : $1;
			});
		},
		isFinishedTm:function(){
			return !(new RegExp("{[A-Za-z_]+[A-Za-z0-9_]*}").test(this)); 
		},
		skipChar:function(ch) {
			if (!this || this.length===0) {return '';}
			if (this.charAt(0)===ch) {return this.substring(1).skipChar(ch);}
			return this;
		},
		isValidPwd:function() {
			return (new RegExp(/^([_]|[a-zA-Z0-9]){6,32}$/).test(this)); 
		},
		isValidMail:function(){
			return(new RegExp(/^\w+((-\w+)|(\.\w+))*\@[A-Za-z0-9]+((\.|-)[A-Za-z0-9]+)*\.[A-Za-z0-9]+$/).test(this.trim()));
		},
		isSpaces:function() {
			for(var i=0; i<this.length; i+=1) {
				var ch = this.charAt(i);
				if (ch!=' '&& ch!="\n" && ch!="\t" && ch!="\r") {return false;}
			}
			return true;
		},
		isPhone:function() {
			return (new RegExp(/(^([0-9]{3,4}[-])?\d{3,8}(-\d{1,6})?$)|(^\([0-9]{3,4}\)\d{3,8}(\(\d{1,6}\))?$)|(^\d{3,8}$)/).test(this));
		},
		isUrl:function(){
			return (new RegExp(/^[a-zA-z]+:\/\/([a-zA-Z0-9\-\.]+)([-\w .\/?%&=:]*)$/).test(this));
		},
		isExternalUrl:function(){
			return this.isUrl() && this.indexOf("://"+document.domain) == -1;
		}
	});
})(jQuery);

/** 
 * You can use this map like this:
 * var myMap = new Map();
 * myMap.put("key","value");
 * var key = myMap.get("key");
 * myMap.remove("key");
 */
function Map(){

	this.elements = new Array();
	
	this.size = function(){
		return this.elements.length;
	}
	
	this.isEmpty = function(){
		return (this.elements.length < 1);
	}
	
	this.clear = function(){
		this.elements = new Array();
	}
	
	this.put = function(_key, _value){
		this.remove(_key);
		this.elements.push({key: _key, value: _value});
	}
	
	this.remove = function(_key){
		try {
			for (i = 0; i < this.elements.length; i++) {
				if (this.elements[i].key == _key) {
					this.elements.splice(i, 1);
					return true;
				}
			}
		} catch (e) {
			return false;
		}
		return false;
	}
	
	this.get = function(_key){
		try {
			for (i = 0; i < this.elements.length; i++) {
				if (this.elements[i].key == _key) { return this.elements[i].value; }
			}
		} catch (e) {
			return null;
		}
	}
	
	this.element = function(_index){
		if (_index < 0 || _index >= this.elements.length) { return null; }
		return this.elements[_index];
	}
	
	this.containsKey = function(_key){
		try {
			for (i = 0; i < this.elements.length; i++) {
				if (this.elements[i].key == _key) {
					return true;
				}
			}
		} catch (e) {
			return false;
		}
		return false;
	}
	
	this.values = function(){
		var arr = new Array();
		for (i = 0; i < this.elements.length; i++) {
			arr.push(this.elements[i].value);
		}
		return arr;
	}
	
	this.keys = function(){
		var arr = new Array();
		for (i = 0; i < this.elements.length; i++) {
			arr.push(this.elements[i].key);
		}
		return arr;
	}
};
$(function(){
	$("input[disabled='disabled'],input[readonly='readonly'],textarea[disabled='disabled'],textarea[readonly='readonly']").each(function(){
		var $this = $(this);
		$this.css("background-color","rgb(233, 233, 233)");
	});
	$("textarea").on("mouseout",function(){
		if(REPS.textEnterExec()){
			isRepsFormSubmitRepeat = true;
		}else{
			isRepsFormSubmitRepeat = false;
		}
	});
	$('input').on('blur',function(){
		$(this).val($(this).val().trim());
	});
});
/**
 * layout
 */
(function($){
	$.fn.layout = function(options) {
		var defaults = {    
	        borderStyle:"1px solid #b8d0d6"
	    };
		return this.each(function() {
			var opts = $.extend(defaults, options);
            var cc = $(this);
            var outWidth=cc.width();    
	        var outHeight=cc.height(); 
	        
            var parentCC=cc.parent();
            //检查是
            //alert("上级宽："+cc.parent().width()+","+cc.parent().height());
            if(cc.parent()[0].tagName=="BODY"){
            	$('html').css({height: '100%',overflow: 'hidden'});
    			$('body').css({height: '100%',overflow: 'hidden',border: 'none'});
    			outWidth = $(window).width();
    			outHeight = $(window).height();
            }else{
            	outWidth=parentCC.width();
            	outHeight=parentCC.height();
            }
            cc.addClass('layout');
    		cc.css({margin:0,padding:0,width:outWidth,height:outHeight});
    		var $panels=$(">div",cc);
    		var topHeight=0,leftWidth=0,rightWidth=0,bottomHeight=0;
    		//var $NewPanels=[];
    		for(var i=0;i<$panels.length;i++){
    		      var $panel=$panels.eq(i); //$panels[i] or $panels.get(i) is get html document 
    		      $panel.addClass("layout-panel");//
    		      var setting=$panel.data("options");
    		    
    		      //alert(setting.border)
    		      
    		      if(setting.border && setting.border=="true"){
 		    	  	 $panel.css("border",opts.borderStyle);
 		    	  }
    		      
    		      if(setting.dock=="left"){
    		         leftWidth=$panel.width();
    		      }else if(setting.dock=="right"){
    		         rightWidth=$panel.width();
    		      }else if(setting.dock=="bottom"){
    		         bottomHeight=$panel.height();
    		      }else if(setting.dock=="top"){
    		    	 $panel.width(outWidth);
    		         topHeight=$panel.height();
    		      }
    		  }
    		for(var i=0;i<$panels.length;i++){
    		      var $panel=$($panels[i]);
    		      var setting=$panel.data("options");
    		      if(setting.dock=="left"){
    		         $panel.addClass("layout-panel-west");
    		         $panel.css("top",topHeight);
    		         $panel.css("left",0);
    		         $panel.height(outHeight-topHeight-bottomHeight);
    		         $panel.width(leftWidth);
    		         
    		      }else if(setting.dock=="right"){
    		    	 $panel.addClass("layout-panel-east");
    		         $panel.css("top",topHeight);
    		         $panel.css("left",outWidth-rightWidth);
    		         $panel.width(rightWidth);
    		         $panel.height(outHeight-topHeight-bottomHeight);
    		         
    		      }else if(setting.dock=="bottom"){
    		    	 $panel.addClass("layout-panel-south");
    		         $panel.css("top",outHeight-bottomHeight);
    		         $panel.css("left",0);
    		         $panel.width(outWidth);
    		         
    		      }else if(setting.dock=="center"){
    		    
    		         $panel.addClass("layout-panel-center");
    		         $panel.css("top",topHeight);
    		         $panel.css("left",leftWidth);
    		         $panel.width(outWidth-leftWidth-rightWidth);
    		         $panel.height(outHeight-topHeight-bottomHeight);
    		         
    		      }else if(setting.dock=="top"){
    		    	
    		         $panel.addClass("layout-panel-north");
    		         $panel.css("top",0);
    		         $panel.css("left",0);
    		         $panel.height(topHeight);
    		      }
    		     
    		  }
    		
 
        });
    };
    
    $(window).resize(function(){
		$(".reps-layout").layout();
		$("div.j-resizeGrid").each(function(){
			var width = $(this).innerWidth();
			if (width){
				$("div.gridScroller", this).width(width+"px");
			}
		});
	});
})(jQuery);
/**
 * @requires jquery.validate.js
 * @author ZhangHuihua@msn.com
 */
(function($){
	if ($.validator) {
		$.validator.addMethod("alphanumeric", function(value, element) {
			return this.optional(element) || /^\w+$/i.test(value);
		}, "Letters, numbers or underscores only please");
		
		$.validator.addMethod("lettersonly", function(value, element) {
			return this.optional(element) || /^[a-z]+$/i.test(value);
		}, "Letters only please"); 
		
		$.validator.addMethod("phone", function(value, element) {
			return this.optional(element) || /^(\d{3,4}-)?\d{7,8}$/.test(value);
		}, "Please specify a valid phone number");
		
		$.validator.addMethod("contactinformation", function(value, element) {
			return this.optional(element) || valiedateContactInformation(value);
		}, "Please specify a valid contact information");
		
		$.validator.addMethod("mobile", function(value, element) {
			return this.optional(element) || /^((\(\d{3}\))|(\d{3}\-))?13\d{9}|14[57]\d{8}|15\d{9}|18\d{9}$/.test(value);
		}, "Please specify a valid mobile");
		
		$.validator.addMethod("chinese", function(value, element) {
			return this.optional(element) || /[\u4e00-\u9fa5]/.test(value);
		}, "Please specify a valid chinese");
		
		$.validator.addMethod("password", function(value, element) {
			return this.optional(element) || /^[\S]{6,18}$/.test(value);
		}, "Please specify a valid password");
		
		$.validator.addMethod("identifycode", function(value, element) {
			return this.optional(element) || /(^\d{15}$)|(^\d{18}$)|(^\d{17}(\d|X|x)$)/.test(value);
		}, "Please specify a valid identifycode");
		
		$.validator.addMethod("postcode", function(value, element) {
			return this.optional(element) || /^[0-9]{6}$/.test(value);
		}, "Please specify a valid postcode");
		
		$.validator.addMethod("date", function(value, element) {
			value = value.replace(/\s+/g, "");
			if (String.prototype.parseDate){
				var $input = $(element);
				var pattern = $input.attr('dateFmt') || 'yyyy-MM-dd';
	
				return !$input.val() || $input.val().parseDate(pattern);
			} else {
				return this.optional(element) || value.match(/^\d{4}[\/-]\d{1,2}[\/-]\d{1,2}$/);
			}
		}, "Please enter a valid date.");
		
		/*自定义js函数验证
		 * <input type="text" name="xxx" customvalid="xxxFn(element)" title="xxx" />
		 */
		$.validator.addMethod("customvalid", function(value, element, params) {
			try{
				return eval('(' + params + ')');
			}catch(e){
				return false;
			}
		}, "Please fix this field.");
		
		$.validator.addMethod("integernum", function(value, element) {
			return this.optional(element) || /^(0|[1-9]\d*)$/.test(value);
		}, "Integer numbers only please");
		
		$.validator.addMethod("chinesealphanumeric", function(value, element) {
			return this.optional(element) || /^[\u4e00-\u9fa5a-zA-Z0-9_]+$/.test(value);
		}, "chinese or alphanumeric only please");
		
		$.validator.addMethod("filename", function(value, element) {
			var fileNameTest = /^[^\\\/:*?"<>|]+/;
			return this.optional(element) || fileNameTest.test(value);
		}, "Please enter a valid filename.");
		
		$.validator.addMethod("moneyvalidate", function(value, element) {
			return this.optional(element) || /^\d+(\.\d+)?$/.test(value);
		}, "Please enter a valid number.");
		
		$.validator.addMethod("idcard", function(value, element) {
			return isIDCard(value);
		}, "Please enter a valid idcard.");
		
		$.validator.addMethod("userregister", function(value, element) {
			return this.optional(element) || /^[\w@\.]*$/.test(value);
		}, "Please enter a valid number.");
		
		$.validator.addClassRules({
			date: {date: true},
			alphanumeric: { alphanumeric: true },
			lettersonly: { lettersonly: true },
			phone: { phone: true },
			postcode: {postcode: true},
			mobile: {mobile: true},
			chinese: {chinese: true},
			password:{password: true},
			identifycode:{identifycode:true},
			integernum:{integernum:true}
		});
		$.validator.setDefaults({errorElement:"span"});
		$.validator.autoCreateRanges = true;
		
	}
	
	var valiedateContactInformation = function(value){
		var contacts = value.split(",");
		for(contact in contacts){
			var contactValue = contacts[contact].trim();
			if(oneStrat(contactValue)){
				if(contactValue.length　== 11){
					if(!/^13\d{9}|14[57]\d{8}|15\d{9}|18\d{9}$/.test(contactValue)){
						return false;
					}
				}else{
					return false;
				}
				
			}else{
				if(!/^[\d\-\(\)]{6,}$/.test(contactValue)){
					return false;
				}
			}
		}
		return true;
	}
	
	var oneStrat = function(value){
		if('1' == value.charAt(0)){
			return true;
		}else{
			return false;
		}
	}
	
	function isIDCard(vSfzh){
		var sfzh = vSfzh.trim();
		if (sfzh == "") return true;

		if(parseInt(sfzh.length)==15 || parseInt(sfzh.length)==17 || parseInt(sfzh.length)==18){
			if (parseInt(sfzh.length)==15){
				sfzh = sfzh.substring(0,6) + "19" + sfzh.substring(6);
			}else if (parseInt(sfzh.length)==18){
				sfzh = sfzh.left(17);
			}
			
			if (!isInt(sfzh)){
				return false;
			}
			
			var csrq = sfzh.substring(6,14);
			var nAge = getYearOld(csrq, '');
			if (nAge<0 || nAge>120){
				return false;
			}
			
			return ZJBHTO18(sfzh);
		}else{
			return false;
		}	
	}

	function ZJBHTO18(zjbh15){
		var sJYMDZB= new Array(11);
		var nW = new Array(18);
		var nA = new Array(18);
		var zj = new Array(10);
		sJYMDZB[0] = "1";
		sJYMDZB[1] = "0";
		sJYMDZB[2] = "X";
		sJYMDZB[3] = "9";
		sJYMDZB[4] = "8";
		sJYMDZB[5] = "7";
		sJYMDZB[6] = "6";
		sJYMDZB[7] = "5";
		sJYMDZB[8] = "4";
		sJYMDZB[9] = "3";
		sJYMDZB[10] = "2";
		
		nW[2]=2;
		nW[3]=4;
		nW[4]=8;
		nW[5]=5;
		nW[6]=10;
		nW[7]=9;
		nW[8]=7;
		nW[9]=3;
		nW[10]=6;
		nW[11]=1;
		nW[12]=2;
		nW[13]=4;
		nW[14]=8;
		nW[15]=5;
		nW[16]=10;
		nW[17]=9;
		nW[18]=7;
		for(var i=0;i<=9;i++){
			zj[i] = new Array(new String(i),i);
		}	

		j=17;
		i=2;
		var sjjg=0;
		var tmp
		if (zjbh15.length==15){
			zjbh15=zjbh15.substring(0,6)+"19"+zjbh15.substring(6);
		}

		while(i<=18){
			tmp=zjbh15.substring(j-1,j);
			for(var k=0;k<=9;k++){
				if (zj[k][0]==tmp){
	  				nA[i]=zj[k][1];
					continue;
				}
			}
			i=i+1;
			j=j-1;
		}
		
		i=2;

		while(i<=18){
			sjjg=sjjg+nA[i]*nW[i];
			i=i+1;
			
		}
		return zjbh15+sJYMDZB[sjjg%11];
	}

})(jQuery);/**
 * @date 2014/4/22
 */
$.setRegional("messager", {
	title:{error:"Error", info:"Information", warn:"Warning", correct:"Successful", confirm:"Confirmation"},
	butMsg:{ok:"OK", yes:"Yes", no:"No", cancel:"Cancel"}
});
var messager = {
	_boxId: "#alertMsgBox",
	_bgId: "#alertBackground",
	_closeTimer: null,

	_types: {error:"error", info:"info", warn:"warn", correct:"correct", confirm:"confirm"},

	_getTitle: function(key){
		return $.regional.messager.title[key];
	},

	_keydownOk: function(event){
		if (event.keyCode == REPS.keyCode.ENTER) event.data.target.trigger("click");
		return false;
	},
	_keydownEsc: function(event){
		if (event.keyCode == REPS.keyCode.ESC) event.data.target.trigger("click");
	},
	/**
	 * 
	 * @param {Object} type
	 * @param {Object} msg
	 * @param {Object} buttons [button1, button2]
	 */
	_open: function(type, msg, buttons){
		var alertButTemplate='<li><a class="button" rel="#callback#" onclick="messager.close()" href="javascript:"><span>#butMsg#</span></a></li>';
		var alertBoxTemplate='<div id="alertMsgBox" class="alert"><div class="alertContent"><div class="#type#"><div class="alertInner"><h1>#title#</h1><div class="msg">#message#</div></div><div class="toolBar"><ul>#butFragment#</ul></div></div></div><div class="alertFooter"><div class="alertFooter_r"><div class="alertFooter_c"></div></div></div></div>';
		$(this._boxId).remove();
		var butsHtml = "";
		if (buttons) {
			for (var i = 0; i < buttons.length; i++) {
				var sRel = buttons[i].call ? "callback" : "";
				butsHtml += alertButTemplate.replace("#butMsg#", buttons[i].name).replace("#callback#", sRel);
			}
		}
		var boxHtml = alertBoxTemplate.replace("#type#", type).replace("#title#", this._getTitle(type)).replace("#message#", msg).replace("#butFragment#", butsHtml);
		$(boxHtml).appendTo("body").css({top:-$(this._boxId).height()+"px"}).animate({top:$(document).scrollTop()+"px"}, 500);
		
		if (this._closeTimer) {
			clearTimeout(this._closeTimer);
			this._closeTimer = null;
		}
		
		$(this._bgId).css("height",$("body").height()).show();
	
		var jButs = $(this._boxId).find("a.button");
		var jCallButs = jButs.filter("[rel=callback]");
		var jDoc = $(document);
		
		for (var i = 0; i < buttons.length; i++) {
			if (buttons[i].call) jCallButs.eq(i).click(buttons[i].call);
			if (buttons[i].keyCode == REPS.keyCode.ENTER) {
				jDoc.bind("keydown",{target:jButs.eq(i)}, this._keydownOk);
			}
			if (buttons[i].keyCode == REPS.keyCode.ESC) {
				jDoc.bind("keydown",{target:jButs.eq(i)}, this._keydownEsc);
			}
		}
		
	},
	close: function(){
		$(document).unbind("keydown", this._keydownOk).unbind("keydown", this._keydownEsc);
		$(this._boxId).animate({top:-$(this._boxId).height()}, 500, function(){
			$(this).remove();
		});
		$(this._bgId).hide();
	},
	error: function(msg, options) {
		this._alert(this._types.error, msg, options);
	},
	info: function(msg, options) {
		this._alert(this._types.info, msg, options);
	},
	warn: function(msg, options) {
		this._alert(this._types.warn, msg, options);
	},
	correct: function(msg, options) {
		this._alert(this._types.correct, msg, options);
	},
	_alert: function(type, msg, options) {
		var op = {okName:$.regional.messager.butMsg.ok, okCall:null};
		$.extend(op, options);
		var buttons = [
			{name:op.okName, call: op.okCall, keyCode:REPS.keyCode.ENTER}
		];
		this._open(type, msg, buttons);
	},
	/**
	 * 
	 * @param {Object} msg
	 * @param {Object} options {okName, okCal, cancelName, cancelCall}
	 */
	confirm: function(msg, options) {
		var op = {okName:$.regional.messager.butMsg.ok, okCall:null, cancelName:$.regional.messager.butMsg.cancel, cancelCall:null};
		$.extend(op, options);
		var buttons = [
			{name:op.okName, call: op.okCall, keyCode:REPS.keyCode.ENTER},
			{name:op.cancelName, call: op.cancelCall, keyCode:REPS.keyCode.ESC}
		];
		this._open(this._types.confirm, msg, buttons);
	},
	message: function(data,callback){
		if(data.statusCode == REPS.statusCode.ok){
			 this.correct(data.message,{ okCall:callback});
		}else if (data.statusCode == REPS.statusCode.error){
			 this.error(data.message);
			 isRepsFormSubmitRepeat = false;
		}else if(data.statusCode == REPS.statusCode.redirect){
			window.location.reload();
		}else{
			this.info(data.message);
			isRepsFormSubmitRepeat = false;
		}
	}
	
};

(function($){
 	$.extend($.fn, {
		jTree:function(options) {
			var op = $.extend({checkFn:null, selected:"selected", exp:"expandable", coll:"collapsable", firstExp:"first_expandable", firstColl:"first_collapsable", lastExp:"last_expandable", lastColl:"last_collapsable", folderExp:"folder_expandable", folderColl:"folder_collapsable", endExp:"end_expandable", endColl:"end_collapsable",file:"file",ck:"checked", unck:"unchecked",cascade:true}, options);
			return this.each(function(){
				var $this = $(this);
				var cnum = $this.children().length;
				$(">li", $this).each(function(){
					var $li = $(this);
					
					var first = $li.prev()[0]?false:true;
					var last = $li.next()[0]?false:true; 
					$li.genTree({
						icon:$this.hasClass("treeFolder"),
						ckbox:$this.hasClass("treeCheck"),
						options: op,
						level: 0,
						exp:(cnum>1?(first?op.firstExp:(last?op.lastExp:op.exp)):op.endExp),
						coll:(cnum>1?(first?op.firstColl:(last?op.lastColl:op.coll)):op.endColl),
						showSub:(!$this.hasClass("collapse") && ($this.hasClass("expand") || (cnum>1?(first?true:false):true))),
						isLast:(cnum>1?(last?true:false):true),
						cascade:op.cascade
					});
				});
				
				if(op.cascade){
					setTimeout(function(){
						if($this.hasClass("treeCheck")){
							var checkFn = eval($this.attr("oncheck"));
							if(checkFn && $.isFunction(checkFn)) {
								$("div.ckbox", $this).each(function(){
									var ckbox = $(this);
									ckbox.click(function(){
										var checked = $(ckbox).hasClass("checked");
										var items = [];
										if(checked){
											var tnode = $(ckbox).parent().parent();
											var boxes = $("input", tnode);
											if(boxes.size() > 1) {
												$(boxes).each(function(){
													items[items.length] = {name:$(this).attr("name"), value:$(this).val(), text:$(this).attr("text")};
												});
											} else {
												items = {name:boxes.attr("name"), value:boxes.val(), text:boxes.attr("text")};
											}		
										}								
										checkFn({checked:checked, items:items});														
									});
								});
							}
						}
						$("a", $this).click(function(event){
							$("div." + op.selected, $this).removeClass(op.selected);
							var parent = $(this).parent().addClass(op.selected);
							var $li = $(this).parents("li:first"), sTarget = $li.attr("target");
							if (sTarget) {
								if ($("#"+sTarget, $this).size() == 0) {
									$this.prepend('<input id="'+sTarget+'" type="hidden" />');
								}
								$("#"+sTarget, $this).val($li.attr("rel"));
							}
							
							$(".ckbox",parent).trigger("click");
							event.stopPropagation();
							$(document).trigger("click");
							if (!$(this).attr("target")) return false;
						});
					},1);
				}
				
			});
		},
		subTree:function(op, level) {
			return this.each(function(){
				$(">li", this).each(function(){
					var $this = $(this);
					
					var isLast = ($this.next()[0]?false:true);
					$this.genTree({
						icon:op.icon,
						ckbox:op.ckbox,
						exp:isLast?op.options.lastExp:op.options.exp,
						coll:isLast?op.options.lastColl:op.options.coll,
						options:op.options,
						level:level,
						space:isLast?null:op.space,
						showSub:op.showSub,
						isLast:isLast,
						cascade:op.cascade
					});
					
				});
			});
		},
		genTree:function(options) {
			var op = $.extend({icon:options.icon,ckbox:options.ckbox,exp:"", coll:"", showSub:false, level:0, options:null, isLast:false}, options);
			return this.each(function(){
				var node = $(this);
				var tree = $(">ul", node);
				var parent = node.parent().prev();
				var checked = 'unchecked';
				if(op.ckbox) {
					if($(">.checked",parent).size() > 0 && op.cascade) checked = 'checked';
				}
				if (tree.size()>0) {
					node.children(":first").wrap("<div></div>");
					$(">div", node).prepend("<div class='" + (op.showSub ? op.coll : op.exp) + "'></div>"+(op.ckbox ?"<div class='ckbox " + checked + "'></div>":"")+(op.icon?"<div class='"+ (op.showSub ? op.options.folderColl : op.options.folderExp) +"'></div>":""));
					op.showSub ? tree.show() : tree.hide();
					$(">div>div:first,>div>a", node).click(function(){
						var $fnode = $(">li:first",tree);
						if($fnode.children(":first").isTag('a')) tree.subTree(op, op.level + 1);
						var $this = $(this);
						var isA = $this.isTag('a');
						var $this = isA?$(">div>div", node).eq(op.level):$this;
						if (!isA || tree.is(":hidden")) {
							$this.toggleClass(op.exp).toggleClass(op.coll);
							if (op.icon) {
								$(">div>div:last", node).toggleClass(op.options.folderExp).toggleClass(op.options.folderColl);
							}
						}
						(tree.is(":hidden"))?tree.slideDown("fast"):(isA?"":tree.slideUp("fast"));
						return false;
					});
					addSpace(op.level, node);
					if(op.showSub) tree.subTree(op, op.level + 1);
				} else {
					node.children().wrap("<div></div>");			
					$(">div", node).prepend("<div class='node'></div>"+(op.ckbox?"<div class='ckbox "+checked+"'></div>":"")+(op.icon?"<div class='file'></div>":""));
					addSpace(op.level, node);
					$(node).children("div").children().last().attr("level","0");
					if(op.isLast){
						$(node).addClass("last");
					}
					
				}
				if (op.ckbox) node._check(op);
				$(">div",node).mouseover(function(){
					$(this).addClass("hover");
				}).mouseout(function(){
					$(this).removeClass("hover");
				});
				if($.browser.msie)
					$(">div",node).click(function(){
						$("a", this).trigger("click");
						return false;
					});
			});
			function addSpace(level,node) {
				if (level > 0) {					
					var parent = node.parent().parent();
					var space = !parent.next()[0]?"indent":"line";
					var plist = "<div class='" + space + "'></div>";
					if (level > 1) {
						var next = $(">div>div", parent).filter(":first");
						var prev = "";
						while(level > 1){
							prev = prev + "<div class='" + next.attr("class") + "'></div>";
							next = next.next();
							level--;
						}
						plist = prev + plist;
					}
					$(">div", node).prepend(plist);
				}
			}
		},
		_check:function(op) {
			var node = $(this);
			var ckbox = $(">div>.ckbox", node);
			var $input = node.find("a");
			var tname = $input.attr("tname"), tvalue = $input.attr("tvalue");
			var attrs = "text='"+$input.text()+"' ";
			if (tname) attrs += "name='"+tname+"' ";
			if (tvalue) attrs += "value='"+tvalue+"' ";
			
			ckbox.append("<input type='checkbox' style='display:none;' " + attrs + "/>").click(function(){
				var cked = ckbox.hasClass("checked");
				var aClass = cked?"unchecked":"checked";
				var rClass = cked?"checked":"unchecked";
				ckbox.removeClass(rClass).removeClass(!cked?"indeterminate":"").addClass(aClass);
				$("input", ckbox).attr("checked", !cked);
				if(op.cascade){
					$(">ul", node).find("li").each(function(){
						var box = $("div.ckbox", this);
						box.removeClass(rClass).removeClass(!cked?"indeterminate":"").addClass(aClass)
						   .find("input").attr("checked", !cked);
					});
					$(node)._checkParent();
				}
				return false;
			});
			var cAttr = $input.attr("checked") || false;
			if (cAttr) {
				ckbox.find("input").attr("checked", true);
				ckbox.removeClass("unchecked").addClass("checked");
				if(op.cascade){
					$(node)._checkParent();
				}
			}
		},
		_checkParent:function(){
			if($(this).parent().hasClass("tree")) return;
			var parent = $(this).parent().parent();
			var stree = $(">ul", parent);
			var ckbox = stree.find(">li>a").size()+stree.find("div.ckbox").size();
			var ckboxed = stree.find("div.checked").size();
			var aClass = (ckboxed==ckbox?"checked":(ckboxed!=0?"indeterminate":"unchecked"));
			var rClass = (ckboxed==ckbox?"indeterminate":(ckboxed!=0?"checked":"indeterminate"));
			$(">div>.ckbox", parent).removeClass("unchecked").removeClass("checked").removeClass(rClass).addClass(aClass);
			
			var $checkbox = $(":checkbox", parent);
			if (aClass == "checked") $checkbox.attr("checked","checked");
			else if (aClass == "unchecked") $checkbox.removeAttr("checked");
			
			parent._checkParent();
		}
	});
})(jQuery);/**
 * @author Roger Wu
 */

(function($) {
var jmenus = new Map();
// If the REPS scope is not available, add it
$.reps = $.reps || {};

$.fn.extend({
	accordion: function(options, data) {

		var args = Array.prototype.slice.call(arguments, 1);

		return this.each(function() {
			if (options.fillSpace) jmenus.put(options.fillSpace, this);
			if (typeof options == "string") {
				var accordion = $.data(this, "reps-accordion");
				accordion[options].apply(accordion, args);
			// INIT with optional options
			} else if (!$(this).is(".reps-accordion"))
				$.data(this, "reps-accordion", new $.reps.accordion(this, options));
		});
	},
	/**
	 * deprecated, use accordion("activate", index) instead
	 * @param {Object} index
	 */
	activate: function(index) {
		return this.accordion("activate", index);
	}	
});

$.reps.accordion = function(container, options) {
	
	// setup configuration
	this.options = options = $.extend({}, $.reps.accordion.defaults, options);
	this.element = container;
	
	$(container).addClass("reps-accordion");
	if ( options.navigation ) {
		var current = $(container).find("a").filter(options.navigationFilter);
		if ( current.length ) {
			if ( current.filter(options.header).length ) {
				options.active = current;
			} else {
				options.active = current.parent().parent().prev();
				current.addClass("current");
			}
		}
	}
	// calculate active if not specified, using the first header
	options.headers = $(container).find(options.header);
	options.active = findActive(options.headers, options.active);

	if ( options.fillSpace ) {
		fillSpace(options.fillSpace);		
	} else if ( options.autoheight ) {
		var maxHeight = 0;
		options.headers.next().each(function() {
			maxHeight = Math.max(maxHeight, $(this).outerHeight());
		}).height(maxHeight);
	}

	options.headers
		.not(options.active || "")
		.next()
		.hide();
	options.active.find("h2").addClass(options.selectedClass);
	
	if (options.event)
		$(container).bind((options.event) + ".reps-accordion", clickHandler);
};

$.reps.accordion.prototype = {
	activate: function(index) {
		// call clickHandler with custom event
		clickHandler.call(this.element, {
			target: findActive( this.options.headers, index )[0]
		});
	},
	
	enable: function() {
		this.options.disabled = false;
	},
	disable: function() {
		this.options.disabled = true;
	},
	destroy: function() {
		this.options.headers.next().css("display", "");
		if ( this.options.fillSpace || this.options.autoheight ) {
			this.options.headers.next().css("height", "");
		}
		$.removeData(this.element, "reps-accordion");
		$(this.element).removeClass("reps-accordion").unbind(".reps-accordion");
	}
}

function scopeCallback(callback, scope) {
	return function() {
		return callback.apply(scope, arguments);
	};
}

function completed(cancel) {
	// if removed while animated data can be empty
	if (!$.data(this, "reps-accordion"))
		return;
	var instance = $.data(this, "reps-accordion");
	var options = instance.options;
	options.running = cancel ? 0 : --options.running;
	if ( options.running )
		return;
	if ( options.clearStyle ) {
		options.toShow.add(options.toHide).css({
			height: "",
			overflow: ""
		});
	}
	$(this).triggerHandler("change.reps-accordion", [options.data], options.change);
}

function fillSpace(key){
	var obj = jmenus.get(key);
	if (!obj) return;
	
	var parent = $(obj).parent();
	var h = 531;
	if(navigator.userAgent.indexOf("MSIE") > 0){
		h = $(obj).find(".accordionContent").height()
	}else{
		h = parent.height();
	}
	var height= h - (($(".accordionHeader",obj).size())*($(".accordionHeader:first-child",obj).outerHeight()))-2;

	var os = parent.children().not(obj);
	$.each(os, function(i){
		height -= $(os[i]).outerHeight();
	});
	$(".accordionContent",obj).height(height);
}

function toggle(toShow, toHide, data, clickedActive, down) {
	var options = $.data(this, "reps-accordion").options;
	options.toShow = toShow;
	options.toHide = toHide;
	options.data = data;
	var complete = scopeCallback(completed, this);
	
	// count elements to animate
	options.running = toHide.size() == 0 ? toShow.size() : toHide.size();
	
	if ( options.animated ) {
		if ( !options.alwaysOpen && clickedActive ) {
			$.reps.accordion.animations[options.animated]({
				toShow: jQuery([]),
				toHide: toHide,
				complete: complete,
				down: down,
				autoheight: options.autoheight
			});
		} else {
			$.reps.accordion.animations[options.animated]({
				toShow: toShow,
				toHide: toHide,
				complete: complete,
				down: down,
				autoheight: options.autoheight
			});
		}
	} else {
		if ( !options.alwaysOpen && clickedActive ) {
			toShow.toggle();
		} else {
			toHide.hide();
			toShow.show();
		}
		complete(true);
	}
}

function clickHandler(event) {
	var options = $.data(this, "reps-accordion").options;
	if (options.disabled)
		return false;
	
	// called only when using activate(false) to close all parts programmatically
	if ( !event.target && !options.alwaysOpen ) {
		options.active.find("h2").toggleClass(options.selectedClass);
		var toHide = options.active.next(),
			data = {
				instance: this,
				options: options,
				newHeader: jQuery([]),
				oldHeader: options.active,
				newContent: jQuery([]),
				oldContent: toHide
			},
			toShow = options.active = $([]);
		toggle.call(this, toShow, toHide, data );
		return false;
	}
	// get the click target
	var clicked = $(event.target);
	
	// due to the event delegation model, we have to check if one
	// of the parent elements is our actual header, and find that
	if ( clicked.parents(options.header).length )
		while ( !clicked.is(options.header) )
			clicked = clicked.parent();
	
	var clickedActive = clicked[0] == options.active[0];
	
	// if animations are still active, or the active header is the target, ignore click
	if (options.running || (options.alwaysOpen && clickedActive))
		return false;
	if (!clicked.is(options.header))
		return;

	// switch classes
	options.active.find("h2").toggleClass(options.selectedClass);
	if ( !clickedActive ) {
		clicked.find("h2").addClass(options.selectedClass);
	}

	// find elements to show and hide
	var toShow = clicked.next(),
		toHide = options.active.next(),
		//data = [clicked, options.active, toShow, toHide],
		data = {
			instance: this,
			options: options,
			newHeader: clicked,
			oldHeader: options.active,
			newContent: toShow,
			oldContent: toHide
		},
		down = options.headers.index( options.active[0] ) > options.headers.index( clicked[0] );
	
	options.active = clickedActive ? $([]) : clicked;
	toggle.call(this, toShow, toHide, data, clickedActive, down );

	return false;
};

function findActive(headers, selector) {
	return selector != undefined
		? typeof selector == "number"
			? headers.filter(":eq(" + selector + ")")
			: headers.not(headers.not(selector))
		: selector === false
			? $([])
			: headers.filter(":eq(0)");
}

$.extend($.reps.accordion, {
	defaults: {
		selectedClass: "collapsable",
		alwaysOpen: true,
		animated: 'slide',
		event: "click",
		header: ".accordionHeader",
		autoheight: true,
		running: 0,
		navigationFilter: function() {
			return this.href.toLowerCase() == location.href.toLowerCase();
		}
	},
	animations: {
		slide: function(options, additions) {
			options = $.extend({
				easing: "swing",
				duration: 300
			}, options, additions);
			if ( !options.toHide.size() ) {
				options.toShow.animate({height: "show"}, options);
				return;
			}
			var hideHeight = options.toHide.height(),
				showHeight = options.toShow.height(),
				difference = showHeight / hideHeight;
			options.toShow.css({ height: 0}).show();
			options.toHide.filter(":hidden").each(options.complete).end().filter(":visible").animate({height:"hide"},{
				step: function(now) {
					var current = (hideHeight - now) * difference;
					if ($.browser.msie || $.browser.opera) {
						current = Math.ceil(current);
					}
					options.toShow.height( current );
				},
				duration: options.duration,
				easing: options.easing,
				complete: function() {
					if ( !options.autoheight ) {
						options.toShow.css({height:"auto"});
					}
					options.toShow.css({overflow:"auto"});
					options.complete();
				}
			});
		},
		bounceslide: function(options) {
			this.slide(options, {
				easing: options.down ? "bounceout" : "swing",
				duration: options.down ? 1000 : 200
			});
		},
		easeslide: function(options) {
			this.slide(options, {
				easing: "easeinout",
				duration: 700
			})
		}
	}
});
})(jQuery);
(function($){
	$.setRegional("datepicker", {
		dayNames:['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
		monthNames:['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
	});

	$.fn.datepicker = function(opts){
		var myMin=null,myMax=null;
		var setting = {
			box$:"#calendar",
			year$:"#calendar [name=year]", month$:"#calendar [name=month]",
			tmInputs$:"#calendar .time :text", hour$:"#calendar .time .hh", minute$:"#calendar .time .mm", second$:"#calendar .time .ss",
			tmBox$:"#calendar .tm", tmUp$:"#calendar .time .up", tmDown$:"#calendar .time .down",
			close$:"#calendar .close", calIcon$:"a.inputDateButton",
			main$:"#calendar .main", days$:"#calendar .days", dayNames$:"#calendar .dayNames",
			clearBut$:"#calendar .clearBut", okBut$:"#calendar .okBut"
		};
		
		var pickerHtml='<div id="calendar">';
		    pickerHtml+='  <div class="main">';
		    pickerHtml+='	  <div class="head">';
		    pickerHtml+='        <table width="100%" border="0" cellpadding="0" cellspacing="2"><tr><td><select name="year"></select></td><td><select name="month"></select></td><td width="20"><span class="close">×</span></td></tr></table>';
		    pickerHtml+='     </div>';
		    pickerHtml+='     <div class="body">';
		    pickerHtml+='        <dl class="dayNames"><dt>Sun</dt><dt>Mon</dt><dt>Tue</dt><dt>Wed</dt><dt>Thu</dt><dt>Fri</dt><dt>Sat</dt></dl>';
		    pickerHtml+='        <dl class="days">日期列表选项</dl>';
		    pickerHtml+='        <div style="clear:both;height:0;line-height:0"></div>';
		    pickerHtml+='     </div>';
		    pickerHtml+='     <div class="foot">';
		    pickerHtml+='          <table class="time"><tr><td><input type="text" class="hh" maxlength="2" start="0" end="23"/>:<input type="text" class="mm" maxlength="2" start="0" end="59"/>:<input type="text" class="ss" maxlength="2" start="0" end="59"/></td><td><ul><li class="up">&and;</li><li class="down">&or;</li></ul></td></tr></table>';
		    pickerHtml+='          <button type="button" class="clearBut">清空</button><button type="button" class="okBut">确定</button>';
		    pickerHtml+='     </div>';
		    pickerHtml+='     <div class="tm">';
		    pickerHtml+='        <ul class="hh"><li>0</li><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li><li>10</li><li>11</li><li>12</li><li>13</li><li>14</li><li>15</li><li>16</li><li>17</li><li>18</li><li>19</li><li>20</li><li>21</li><li>22</li><li>23</li></ul>';
		    pickerHtml+='        <ul class="mm"><li>0</li><li>5</li><li>10</li><li>15</li><li>20</li><li>25</li><li>30</li><li>35</li><li>40</li><li>45</li><li>50</li><li>55</li></ul>';
		    pickerHtml+='        <ul class="ss"><li>0</li><li>10</li><li>20</li><li>30</li><li>40</li><li>50</li></ul>';
		    pickerHtml+='     </div>';
		    pickerHtml+='  </div>';
		    pickerHtml+='</div>';
		
		function changeTmMenu(sltClass){
			var $tm = $(setting.tmBox$);
			$tm.removeClass("hh").removeClass("mm").removeClass("ss");
			if (sltClass) {
				$tm.addClass(sltClass);
				$(setting.tmInputs$).removeClass("slt").filter("." + sltClass).addClass("slt");
			}
		}
		function clickTmMenu($input, type){
			$(setting.tmBox$).find("."+type+" li").each(function(){
				var $li = $(this);
				$li.click(function(){
					$input.val($li.text());
				});
			});
		}
		function keydownInt(e){
			if (!((e.keyCode >= 48 && e.keyCode <= 57) || (e.keyCode == REPS.keyCode.DELETE || e.keyCode == REPS.keyCode.BACKSPACE))) { return false; }
		}
		function changeTm($input, type){
			var ivalue = parseInt($input.val()), istart = parseInt($input.attr("start")) || 0, iend = parseInt($input.attr("end"));
			var istep = parseInt($input.attr('step') || 1);
			if (type == 1) {
				if (ivalue <= iend-istep){$input.val(ivalue + istep);}
			} else if (type == -1){
				if (ivalue >= istart+istep){$input.val(ivalue - istep);}
			} else if (ivalue > iend) {
				$input.val(iend);
			} else if (ivalue < istart) {
				$input.val(istart);
			}
		}
				
		return this.each(function(){
			
			var $this = $(this);
			var opts = {};
			if ($this.attr("dateFmt")) opts.pattern = $this.attr("dateFmt");
			if ($this.attr("minDate")) opts.minDate = $this.attr("minDate");
			if ($this.attr("maxDate")) opts.maxDate = $this.attr("maxDate");
			if ($this.attr("mmStep")) opts.mmStep = $this.attr("mmStep");
			if ($this.attr("ssStep")) opts.ssStep = $this.attr("ssStep");

			if(opts.maxDate && opts.maxDate.indexOf("#")>-1){
				myMin=opts.maxDate;
				opts.maxDate=$(opts.maxDate).val();
				//opts.maxDate=null;
			}
		    
			if(opts.minDate && opts.minDate.indexOf("#")>-1){
				myMax=opts.minDate;
				opts.minDate=$(opts.minDate).val();
				//opts.minDate=null;
			}
		    
			
			var dp = new Datepicker($this.val(), opts);
			
			function generateCalendar(dp){
				var dw = dp.getDateWrap();
				var minDate = dp.getMinDate();
				var maxDate = dp.getMaxDate();

				var monthStart = new Date(dw.year,dw.month-1,1);
				var startDay = monthStart.getDay();
				var dayStr="";
				if (startDay > 0){
					monthStart.setMonth(monthStart.getMonth() - 1);
					var prevDateWrap = dp.getDateWrap(monthStart);
					for(var t=prevDateWrap.days-startDay+1;t<=prevDateWrap.days;t++) {
						var _date = new Date(dw.year,dw.month-2,t);
						var _ctrClass = (_date >= minDate && _date <= maxDate) ? '' : 'disabled';
						dayStr+='<dd class="other '+_ctrClass+'" chMonth="-1" day="' + t + '">'+t+'</dd>';
					}
				}
				for(var t=1;t<=dw.days;t++){
					var _date = new Date(dw.year,dw.month-1,t);
					var _ctrClass = (_date >= minDate && _date <= maxDate) ? '' : 'disabled';
					if(t==dw.day){
						dayStr+='<dd class="slt '+_ctrClass+'" day="' + t + '">'+t+'</dd>';
					}else{
						dayStr+='<dd class="'+_ctrClass+'" day="' + t + '">'+t+'</dd>';
					}
				}
				for(var t=1;t<=42-startDay-dw.days;t++){
					var _date = new Date(dw.year,dw.month,t);
					var _ctrClass = (_date >= minDate && _date <= maxDate) ? '' : 'disabled';
					dayStr+='<dd class="other '+_ctrClass+'" chMonth="1" day="' + t + '">'+t+'</dd>';
				}
				
				var $days = $(setting.days$).html(dayStr).find("dd");
				$days.not('.disabled').click(function(){
					var $day = $(this);
					
					if (!dp.hasTime()) {
						$this.val(dp.formatDate(dp.changeDay($day.attr("day"), $day.attr("chMonth"))));
						closeCalendar(); 
					} else {
						$days.removeClass("slt");
						$day.addClass("slt");
					}
				});

				if (!dp.hasDate()) $(setting.main$).addClass('nodate'); // 仅时间，无日期
				
				if (dp.hasTime()) {
					$("#calendar .time").show();
					
					var $hour = $(setting.hour$).val(dw.hour).focus(function(){
						changeTmMenu("hh");
					});
					var iMinute = parseInt(dw.minute / dp.opts.mmStep) * dp.opts.mmStep;
					var $minute = $(setting.minute$).val(iMinute).attr('step',dp.opts.mmStep).focus(function(){
						changeTmMenu("mm");
					});
					var $second = $(setting.second$).val(dp.hasSecond() ? dw.second : 0).attr('step',dp.opts.ssStep).focus(function(){
						changeTmMenu("ss");
					});
					
					$hour.add($minute).add($second).click(function(){return false});
					
					clickTmMenu($hour,"hh");
					clickTmMenu($minute,"mm");
					clickTmMenu($second,"ss");
					$(setting.box$).click(function(){
						changeTmMenu();
					});
					
					var $inputs = $(setting.tmInputs$);
					$inputs.keydown(keydownInt).each(function(){
						var $input = $(this);
						$input.keyup(function(){
							changeTm($input, 0);
						});
					});
					$(setting.tmUp$).click(function(){
						$inputs.filter(".slt").each(function(){
							changeTm($(this), 1);
						});
					});
					$(setting.tmDown$).click(function(){
						$inputs.filter(".slt").each(function(){
							changeTm($(this), -1);
						});
					});
					
					if (!dp.hasHour()) $hour.attr("disabled",true);
					if (!dp.hasMinute()) $minute.attr("disabled",true);
					if (!dp.hasSecond()) $second.attr("disabled",true);
				}
				
			}
			
			function closeCalendar() {
				$(setting.box$).remove();
				$(document).unbind("click", closeCalendar);
			}

			$this.click(function(event){
				closeCalendar();
				var dp = new Datepicker($this.val(), opts);
				var offset = $this.offset();
				var iTop = offset.top+this.offsetHeight;
				//alert(pickerHtml);
				$(pickerHtml).appendTo("body").css({
					left:offset.left+'px',
					top:iTop+'px'
				}).show().click(function(event){
					event.stopPropagation();
				});
				
				($.fn.bgiframe && $(setting.box$).bgiframe());
				
				var dayNames = "";
				$.each($.regional.datepicker.dayNames, function(i,v){
					dayNames += "<dt>" + v + "</dt>"
				});
				$(setting.dayNames$).html(dayNames);
				
				var dw = dp.getDateWrap();
				var $year = $(setting.year$);
				var yearstart = dp.getMinDate().getFullYear();
				var yearend = dp.getMaxDate().getFullYear();
				for(y=yearstart; y<=yearend; y++){
					$year.append('<option value="'+ y +'"'+ (dw.year==y ? 'selected="selected"' : '') +'>'+ y +'</option>');
				}
				var $month = $(setting.month$);
				$.each($.regional.datepicker.monthNames, function(i,v){
					var m = i+1;
					$month.append('<option value="'+ m +'"'+ (dw.month==m ? 'selected="selected"' : '') +'>'+ v +'</option>');
				});
				
				// generate calendar
				generateCalendar(dp);
				$year.add($month).change(function(){
					dp.changeDate($year.val(), $month.val());
					generateCalendar(dp);
				});
				
				// fix top
				var iBoxH = $(setting.box$).outerHeight(true);
				if (iTop > iBoxH && iTop > $(window).height()-iBoxH) {
					$(setting.box$).css("top", offset.top - iBoxH);
				}
				
				$(setting.close$).click(function(){
					closeCalendar();
				});
				$(setting.clearBut$).click(function(){
					$this.val("");
					closeCalendar();
				});
				$(setting.okBut$).click(function(){
					var $dd = $(setting.days$).find("dd.slt");
					
					if ($dd.hasClass("disabled")) return false;
					
					var date = dp.changeDay($dd.attr("day"), $dd.attr("chMonth"));
					
					if (dp.hasTime()) {
					 	date.setHours(parseInt($(setting.hour$).val()));
						date.setMinutes(parseInt($(setting.minute$).val()));
						date.setSeconds(parseInt($(setting.second$).val()));
					}
					
					$this.val(dp.formatDate(date));
					closeCalendar();
				});
				$(document).bind("click", closeCalendar);
				return false;
			});
			
			$this.parent().find(setting.calIcon$).click(function(){
				$this.trigger("click");
				return false;
			});
		});
		
	}

	var Datepicker = function(sDate, opts) {
		this.opts = $.extend({
			pattern:'yyyy-MM-dd',
			minDate:"1900-01-01",
			maxDate:"2099-12-31",
			mmStep:1,
			ssStep:1
		}, opts);
		
		
		
		//动态minDate、maxDate
		var now = new Date();
		this.opts.minDate = now.formatDateTm(this.opts.minDate);
		this.opts.maxDate = now.formatDateTm(this.opts.maxDate);
		
		this.sDate = sDate.trim();
	}
	
	$.extend(Datepicker.prototype, {
		get: function(name) {
			return this.opts[name];
		},
		_getDays: function (y,m){//获取某年某月的天数

			return m==2?(y%4||!(y%100)&&y%400?28:29):(/4|6|9|11/.test(m)?30:31);
		},

		_minMaxDate: function(sDate){
			var _count = sDate.split('-').length -1;
			var _format = 'y-M-d';
			if (_count == 1) _format = 'y-M';
			else if (_count == 0) _format = 'y';
			
			return sDate.parseDate(_format);
		},
		getMinDate: function(){
//			alert("前="+this.opts.minDate);
//			if(this.opts.minDate.length>0){
//			    if(this.opts.minDate.indexOf("#")>-1){
//			    	this.opts.minDate=$(this.opts.minDate).val();
//			    }
//			}
//			alert("后="+this.opts.minDate);
			return this._minMaxDate(this.opts.minDate);
		},
		getMaxDate: function(){
//			if(this.opts.maxDate){
//			    if(this.opts.maxDate.indexOf("#")>-1){
//			    	this.opts.maxDate=$(this.opts.maxDate).val();
//			    }
//			}
			var _sDate = this.opts.maxDate;
			var _count = _sDate.split('-').length -1;
			var _date = this._minMaxDate(_sDate);
			
			if (_count < 2) { //format:y-M、y

				var _day = this._getDays(_date.getFullYear(), _date.getMonth()+1);
				_date.setDate(_day);
				if (_count == 0) {//format:y

					_date.setMonth(11);
				}
			}

			return _date;
		},
		getDateWrap: function(date){ //得到年,月,日

			if (!date) date = this.parseDate(this.sDate) || new Date();
			var y = date.getFullYear();
			var m = date.getMonth()+1;
			var days = this._getDays(y,m);
			return {
				year:y, month:m, day:date.getDate(),
				hour:date.getHours(),minute:date.getMinutes(),second:date.getSeconds(),
				days: days, date:date
			}
		},
		/**
		 * @param {year:2010, month:05, day:24}
		 */
		changeDate: function(y, m, d){
			var date = new Date(y, m - 1, d || 1);
			this.sDate = this.formatDate(date);
			return date;
		},
		changeDay: function(day, chMonth){
			if (!chMonth) chMonth = 0;
			var dw = this.getDateWrap();
			return this.changeDate(dw.year, dw.month+parseInt(chMonth), day);
		},
		parseDate: function(sDate){
			if (!sDate) return null;
			return sDate.parseDate(this.opts.pattern);
		},
		formatDate: function(date){
			return date.formatDate(this.opts.pattern);
		},
		hasHour: function() {
			return this.opts.pattern.indexOf("H") != -1;
		},
		hasMinute: function() {
			return this.opts.pattern.indexOf("m") != -1;
		},
		hasSecond: function() {
			return this.opts.pattern.indexOf("s") != -1;
		},
		hasTime: function() {
			return this.hasHour() || this.hasMinute() || this.hasSecond();
		},
		hasDate: function() {
			var _dateKeys = ['y','M','d','E'];
			for (var i=0; i<_dateKeys.length; i++){
				if (this.opts.pattern.indexOf(_dateKeys[i]) != -1) return true;
			}

			return false;
		}
	});
})(jQuery);
 (function($){
	$.fn.jTable = function(options){
		return this.each(function(){
			var seqFlagoptions = $(this).data("options");
		 	var $table = $(this), nowrapTD = $table.attr("nowrapTD");
		 	var tlength = $table.width();
			var aStyles = [];
			var $tc = $table.parent().addClass("j-resizeGrid"); // table parent container
			var layoutH = $(this).attr("layoutH");
			var flagSeq = false;
			var showSeq = false;
			var flagOverText = true;
			var flagAlign;
			var pageSize = 20;
			var curPageNumber = 1;
			if(seqFlagoptions){
				flagSeq = seqFlagoptions.flagSeq;
				showSeq = seqFlagoptions.showSeq;
				flagAlign = seqFlagoptions.flagAlign;
				pageSize = seqFlagoptions.pageSize || 20;
				curPageNumber = seqFlagoptions.curPageNumber || 1;
				if(!seqFlagoptions.flagOverText){
					flagOverText = false;
				}
			}
			var oldThs;
			var beforeThs = $table.find("thead>tr:last-child").find("th");
			var flagWidth = true;
			var widths = [];
			var sum = 0;
			var seqWidth;
			// ready for all widths before insert sequence
			for(var j = 0; j < beforeThs.size();j++){
				var $th = $(beforeThs[j]);
				var width = $th.attr("width");
				if(width == "undefined"){
					flagWidth = false;
					widths = [];
					break;
				}
				var parseWidth = parseInt(width);
				widths.push(parseWidth);
				sum += parseWidth;
			}
			
			// if flagSeq is true , calculate the sequence width and the other list width
			if(flagSeq){
				seqWidth = (5/100)*sum;
				for(var i = 0 , l = widths.length; i < l; i++){
					widths[i] = widths[i] - seqWidth/l;
				}
			}
			if(flagSeq){
				if(showSeq){
					oldThs = $table.find("thead>tr:last-child").prepend("<th align='"+(flagAlign == null ? "center" : flagAlign)+"' flagSeq=\"true\" width=\""+seqWidth+"\">序号</th>").find("th");
				}else{
					oldThs = $table.find("thead>tr:last-child").prepend("<th flagSeq=\"true\" width=\""+seqWidth+"\"></th>").find("th");
				}
			}else{
				oldThs = $table.find("thead>tr:last-child").find("th");
			}
			
			
			for(var i = 0, l = oldThs.size(); i < l; i++) {
				var $th = $(oldThs[i]);
				var style = [], width;
				if(flagSeq && flagWidth){
					var oriWidth;
					if(0 == i){
						oriWidth = (seqWidth/sum) * tlength;
					}else{
						oriWidth = (widths[i-1]/sum) * tlength;
					}
					width=oriWidth -(100 * oriWidth/tlength)-2;
				}else{
					if(widths.length <= 0 ){
						width = $th.width() - (100 * $th.width() / tlength)-2;
					}else{
						width = (widths[i]/sum) * tlength - (100 * widths[i] / tlength)-10;
					}
				}
				style[0] = parseInt(width);
				style[1] = $th.attr("align");
				aStyles[aStyles.length] = style;
			}
			$(this).wrap("<div class='grid'></div>");
			var $grid = $table.parent().html($table.html());
			var thead = $grid.find("thead");
			thead.wrap("<div class='gridHeader'><div class='gridThead'><table style='width:" + (tlength - 20) + "px;'></table></div></div>");
			var lastH = $(">tr:last-child", thead);
			var ths = $(">th", lastH);
			
			$("th",thead).each(function(){
				var $th = $(this);
				$th.html("<div class='gridCol' title='"+$th.text()+"'>"+ $th.html() +"</div>");	
			});
			var flagCheckbox = false;
			ths.each(function(i,v){
				if($(v).attr("flagcheckbox") == "checkbox"){
					flagCheckbox = true;
				}
				var $th = $(this), style = aStyles[i];
				$th.addClass(style[1]).hoverClass("hover").removeAttr("align").removeAttr("width").width(style[0]);
			}).filter("[orderField]").orderBy({
				targetType: $table.attr("targetType"),
				rel:$table.attr("rel"),
				asc: $table.attr("asc") || "asc",
				desc:  $table.attr("desc") || "desc"
			});
			
			if(flagCheckbox){
				$("body").delegate("input[name=seqCheck]","click",function(){
					var $this = $(this);
					if($this.prop("checked") == true){
						$(".itemCheck").each(function(i,v){
							$(v).prop("checked",true);
						})
					}else{
						$(".itemCheck").each(function(i,v){
							$(v).prop("checked",false);
						})
					}
				})
			}
			var tbody = $grid.find(">tbody");
			var layoutStr = layoutH ? " layoutH='" + layoutH + "'" : "";
			
			tbody.wrap("<div class='gridScroller'" + layoutStr + " style='width:" + $tc.width() + "px;'><div class='gridTbody'><table style='width:" + (tlength - 20) + "px;'></table></div></div>");
			var ftr = $(">tr:first-child", tbody);
			var $trs = tbody.find('>tr');
			
			$trs.hoverClass().each(function(i){
				var $tr = $(this);
				if(flagSeq){
					if($tr.find("td:first").html() != $.regional.compare.novalue){
						$tr.prepend("<td align='center'>"+(pageSize * (curPageNumber - 1)+i+1)+"</td>");
					}
				}
				var $ftds = $(">td", this);

				for (var i=0; i < $ftds.size(); i++) {
					var $ftd = $($ftds[i]);
					if (nowrapTD != "false") $ftd.html("<div><span>" + $ftd.html() + "</span></div>");
					if (i < aStyles.length) $ftd.addClass(aStyles[i][1]);
				}		
				$tr.click(function(){
					$trs.filter(".selected").removeClass("selected");
					$tr.addClass("selected");
					var sTarget = $tr.attr("target");
					if (sTarget) {
						if ($("#"+sTarget, $grid).size() == 0) {
							$grid.prepend('<input id="'+sTarget+'" type="hidden" />');
						}
						$("#"+sTarget, $grid).val($tr.attr("rel"));
					}
				});
			});
			
			$(">td",ftr).each(function(i){
				if (i < aStyles.length) $(this).width(aStyles[i][0]);
			});			
			
			$grid.append("<div class='resizeMarker' style='height:300px; left:57px;display:none;'></div><div class='resizeProxy' style='height:300px; left:377px;display:none;'></div>");
	
			var scroller = $(".gridScroller", $grid);
			scroller.scroll(function(event){
				var header = $(".gridThead", $grid);
				if(scroller.scrollLeft() > 0){
					var scroll = scroller.scrollLeft();
					var left = (0 - scroll) + "px;";
					header.attr("style", "position:relative;left:"+left);
				}
				if(scroller.scrollLeft() == 0) {
					header.css("position", "relative");
					header.css("left", "0px");
				}
		        return false;
			});		
			
			
			$(">tr", thead).each(function(){

				$(">th", this).each(function(i){
					var th = this, $th = $(this);
					$th.mouseover(function(event){
						var offset = $.jTableTool.getOffset(th, event).offsetX;
						if($th.outerWidth() - offset < 5) {
							$th.css("cursor", "col-resize").mousedown(function(event){
								$(".resizeProxy", $grid).show().css({
									left: $.jTableTool.getRight(th)- $(".gridScroller", $grid).scrollLeft(),
									top:$.jTableTool.getTop(th),
									height:$.jTableTool.getHeight(th,$grid),
									cursor:"col-resize"
								});
								$(".resizeMarker", $grid).show().css({
										left: $.jTableTool.getLeft(th) + 1 - $(".gridScroller", $grid).scrollLeft(),
										top: $.jTableTool.getTop(th),
										height:$.jTableTool.getHeight(th,$grid)									
								});
								$(".resizeProxy", $grid).jDrag($.extend(options, {scop:true, cellMinW:20, relObj:$(".resizeMarker", $grid)[0],
										move: "horizontal",
										event:event,
										stop: function(){
											var pleft = $(".resizeProxy", $grid).position().left;
											var mleft = $(".resizeMarker", $grid).position().left;
											var move = pleft - mleft - $th.outerWidth() -9;

											var cols = $.jTableTool.getColspan($th);
											var cellNum = $.jTableTool.getCellNum($th);
											var oldW = $th.width(), newW = $th.width() + move;
											var newestTbody = $(".gridTbody tbody");
											var newestftr = $(">tr:first-child", newestTbody);
											var $dcell = $(">td", newestftr).eq(cellNum - 1);
											
											$th.width(newW + "px");
											$dcell.width(newW+"px");
											
											var $table1 = $(thead).parent();
											$table1.width(($table1.width() - oldW + newW)+"px");
											
											var $table2 = newestTbody.parent();
											$table2.width(($table2.width() - oldW + newW)+"px");
											
											$(".resizeMarker,.resizeProxy", $grid).hide();
										}
									})
								);
							});
						} else {
							$th.css("cursor", $th.attr("orderField") ? "pointer" : "default");
							$th.unbind("mousedown");
						}
						return false;
					});
				});
			});
		
			function _resizeGrid(){
				$("div.j-resizeGrid").each(function(){
					var width = $(this).innerWidth();
					if (width){
						$("div.gridScroller", this).width(width+"px");
					}
				});
			}
			$(window).unbind(REPS.eventType.resizeGrid).bind("resizeGrid", _resizeGrid);
			$(window).resize(function(){window.location.reload();});
			if(flagOverText){
				$("body").delegate(".gridTbody tbody tr div span","mouseover",function(){
					var $this = $(this);
					var width = $this.width();
					var $parent = $this.parent();
					var $td = $parent.parent();
					var top = $td.offset().top - $(".gridScroller").offset().top + $(".gridScroller").scrollTop();
					var left = $td.offset().left;
					var pwidth = $parent.width();
					if(width > pwidth){
						$td.attr("overflow","auto");
						$parent.css({"position":"absolute","background":"#eee","top":top,"left":left,"z-index":"9999"});
					}
				});
				
				$("body").delegate(".gridTbody tbody tr div span","mouseout",function(){
					var $this = $(this);
					var width = $this.width();
					var $parent = $this.parent();
					var $td = $parent.parent();
					var pwidth = $td.width();
					if(width > pwidth){
						$td.attr("overflow","hidden");
						$parent.removeAttr("style");
					}
				});
			}
			
		});
	};
	
	
	$.jTableTool = {
		getLeft:function(obj) {
			var width = 0;
			$(obj).prevAll().each(function(){
				width += $(this).outerWidth();
			});
			return width - 1;
		},
		getRight:function(obj) {
			var width = 0;
			$(obj).prevAll().andSelf().each(function(){
				width += $(this).outerWidth();
			});
			return width - 1;
		},
		getTop:function(obj) {
			var height = 0;
			$(obj).parent().prevAll().each(function(){
				height += $(this).outerHeight();
			});
			return height;
		},
		getHeight:function(obj, parent) {
			var height = 0;
			var head = $(obj).parent();
			head.nextAll().andSelf().each(function(){
				height += $(this).outerHeight();
			});
			$(".gridTbody", parent).children().each(function(){
				height += $(this).outerHeight();
			});
			return height;
		},
		getCellNum:function(obj) {
			return $(obj).prevAll().andSelf().size();
		},
		getColspan:function(obj) {
			return $(obj).attr("colspan") || 1;
		},
		getStart:function(obj) {
			var start = 1;
			$(obj).prevAll().each(function(){
				start += parseInt($(this).attr("colspan") || 1);
			});
			return start;
		},
		getPageCoord:function(element){
			var coord = {x: 0, y: 0};
			while (element){
			    coord.x += element.offsetLeft;
			    coord.y += element.offsetTop;
			    element = element.offsetParent;
			}
			return coord;
		},
		getOffset:function(obj, evt){
			if($.browser.msie ) {
				var objset = $(obj).offset();
				var evtset = {
					offsetX:evt.pageX || evt.screenX,
					offsetY:evt.pageY || evt.screenY
				};
				var offset ={
			    	offsetX: evtset.offsetX - objset.left,
			    	offsetY: evtset.offsetY - objset.top
				};
				return offset;
			}
			var target = evt.target;
			if (target.offsetLeft == undefined){
			    target = target.parentNode;
			}
			var pageCoord = $.jTableTool.getPageCoord(target);
			var eventCoord ={
			    x: window.pageXOffset + evt.clientX,
			    y: window.pageYOffset + evt.clientY
			};
			var offset ={
			    offsetX: eventCoord.x - pageCoord.x,
			    offsetY: eventCoord.y - pageCoord.y
			};
			return offset;
		}
	};
})(jQuery);
/**
 * pager control
 */
(function($){
	$.setRegional("pagination", {
		first : "first",
		previous : "previous",
		next : "next",
		end : "end",
		confirm :"confirm"
	});
	
	$.fn.extend({
		pagination: function(opts){
			var setting = {
				first$:"li.j-first", 
				prev$:"li.j-prev", 
				next$:"li.j-next", 
				last$:"li.j-last", 
				nums$:"li.j-num>a", 
				jumpto$:"li.jumpto",
				pageNumFrag:'<li class="#liClass#"><a href="javascript:;" title="#pageNum#">#pageNum#</a></li>'
			};
			return this.each(function(){
				var $this = $(this);
				var numLis='<ul>';
				    numLis+='<li class="j-first"><a class="first" href="javascript:;"><span>'+$.regional.pagination.first+'</span></a><span class="first"><span>'+$.regional.pagination.first+'</span></span></li>';
				    numLis+='<li class="j-prev"><a class="previous" href="javascript:;"><span>'+$.regional.pagination.previous+'</span></a><span class="previous"><span>'+$.regional.pagination.previous+'</span></span></li>';
				    numLis+="#pageNumFrag#";
				    numLis+='<li class="j-next"><a class="next" href="javascript:;"><span>'+$.regional.pagination.next+'</span></a><span class="next"><span>'+$.regional.pagination.next+'</span></span></li>';
				    numLis+='<li class="j-last"><a class="last" href="javascript:;"><span>'+$.regional.pagination.end+'</span></a><span class="last"><span>'+$.regional.pagination.end+'</span></span></li>';
				    numLis+='<li class="jumpto"><input class="textInput" type="text" size="4" value="#currentPage#" /><input class="goto" type="button" value="'+$.regional.pagination.confirm+'" /></li>';
				    numLis+='</ul>';
				var pc = new Pagination(opts);
				var interval = pc.getInterval();
				var test = pc.initParameterInForm();
	
				var pageNumFrag = '';
				for (var i=interval.start; i<interval.end;i++){
					pageNumFrag += setting.pageNumFrag.replaceAll("#pageNum#", i).replaceAll("#liClass#", i==pc.getCurrentPage() ? 'selected j-num' : 'j-num');
				}
				
				$this.html(numLis.replaceAll("#pageNumFrag#", pageNumFrag).replaceAll("#currentPage#", pc.getCurrentPage())).find("li").hoverClass();
	
				var $first = $this.find(setting.first$);
				var $prev = $this.find(setting.prev$);
				var $next = $this.find(setting.next$);
				var $last = $this.find(setting.last$);
				
				if (pc.hasPrev()){
					$first.add($prev).children("span").hide();
					$first.add($prev).removeClass("disabled").find("a").show();
					
					$first.find("a").unbind("click").on("click",function(){
						paginationNavBreak(pc.form(),{numPerPage:$("select[name=pageSizeSelect]").val()});
					});
					$prev.find("a").unbind("click").on("click",function(){
						var i = parseInt(pc.opts.currentPage);
						i = i - pc.getInterval().start - 1;
						$("li.j-num").eq(i).find("a").trigger("click");
					});
				} else {
					$first.add($prev).addClass("disabled").find("a").hide();
					$first.add($prev).children("span").show();
				}
				
				if (pc.hasNext()) {
					$next.add($last).children("span").hide();
					$next.add($last).removeClass("disabled").find("a").show();
					$last.find("a").unbind("click").on("click",function(){
						paginationNavBreak(pc.form(),{numPerPage:$("select[name=pageSizeSelect]").val(),end:true,curPageNumber:pc.numPages()});
					});
					$next.find("a").unbind("click").on("click",function(){
						var i = parseInt(pc.opts.currentPage);
						i = i - pc.getInterval().start + 1;
						$("li.j-num").eq(i).find("a").trigger("click");
					});
				} else {
					$next.add($last).addClass("disabled").find("a").hide();
					$next.add($last).children("span").show();
				}
				var clickOptions = {first:$first,prev:$prev,next:$next,last:$last};
				$this.find(setting.nums$).each(function(i){
					_bindEvent($(this), i+interval.start, pc, clickOptions);
				});
				$this.find(setting.jumpto$).each(function(){
					var $this = $(this);
					var $inputBox = $this.find(":text");
					var $button = $this.find(":button");
					$button.click(function(event){
						var pageNum = $inputBox.val();
						if (pageNum && pageNum.isPositiveInteger()) {
							if(pageNum <= pc.numPages() && pageNum >=1){
								if(pc.numPages() == 1 || pc.getCurrentPage() == pageNum){
									alert($.regional.pagination.currentPage);
								}else{
									$(".pagination-nav", document).each(function(){var $this = $(this);$this.pagination({targetType:$this.attr("targetType"),rel:$this.attr("rel"),totalCount:$this.attr("totalCount"),form:$this.attr("form"),numPerPage:$this.attr("numPerPage"),pageNumShown:$this.attr("pageNumShown"),currentPage:pageNum});});
									$(".selected.j-num").find("a").trigger("click");
								}
								
							}else{
								alert($.regional.pagination.overPages);
							}
						}
					});
					$inputBox.keyup(function(event){
						if (event.keyCode == REPS.keyCode.ENTER) $button.click();
					});
				});
				var curP =  $("input[name='curPageNumber']").val();
				var noValueFlag = $(".gridTbody table tr:first td:first span").html();
				if(curP > 1 && $.regional.compare.novalue == noValueFlag){
					$(".pagination-nav ul li.j-num:first a").click();
				}
			});
			
			function _bindEvent($target, pageNum, pc,clickOptions){
				$target.bind("click", function(event){
					//alert("$target="+$target.html()+",rel="+rel+",pageNum="+event.data.pageNum+",formid="+formid);
					var $first = clickOptions.first;
					var $prev = clickOptions.prev;
					var $next = clickOptions.next;
					var $last = clickOptions.last;
					var currentPage = $target.html();
					pc.opts.currentPage = currentPage;
					if (pc.hasPrev()){
						$first.add($prev).children("span").hide();
						$first.add($prev).removeClass("disabled").find("a").show();
						$first.find("a").unbind("click").on("click",function(){
							paginationNavBreak(pc.form(),{numPerPage:$("select[name=pageSizeSelect]").val()});
						});
						$prev.find("a").unbind("click").on("click",function(){
							var i = parseInt(pc.opts.currentPage);
							i = i - pc.getInterval().start - 1;
							$("li.j-num").eq(i).find("a").trigger("click");
						});
					} else {
						$first.add($prev).addClass("disabled").find("a").hide();
						$first.add($prev).children("span").show();
					}
					
					if (pc.hasNext()) {
						$next.add($last).children("span").hide();
						$next.add($last).removeClass("disabled").find("a").show();
						$last.find("a").unbind("click").on("click",function(){
							paginationNavBreak(pc.form(),{numPerPage:$("select[name=pageSizeSelect]").val(),end:true,curPageNumber:pc.numPages()});
						});
						$next.find("a").unbind("click").on("click",function(){
							var i = parseInt(pc.opts.currentPage);
							i = i - pc.getInterval().start + 1;
							$("li.j-num").eq(i).find("a").trigger("click");
						});
					} else {
						$next.add($last).addClass("disabled").find("a").hide();
						$next.add($last).children("span").show();
					}
					
					$target.parent().parent().find(".j-num").each(function(){
						$(this).removeClass("selected");
					});
					$target.parent().addClass("selected");
					
					$form=$("#"+pc.form());
					var curPage=$form.find("input[name='curPageNumber']");
					$(".pagination-nav").attr("currentPage",pageNum);
					curPage.val(pageNum);
					$.ajax({
						type: 'POST',
						url:$form.attr("action"),
						data:$form.serializeArray(),
						dataType:"html",
						cache: false,
						async:false,
						success: function (data) {
			                  var newdata=$(data).find(".reps-grid tbody").html();
			                  var $newTbody=$("<table>"+newdata+"</table>");
			                  var $paginationNav = $(data).find(".pagination .pagination-nav");
			                  var newPaginationTotalCount = parseInt($paginationNav.attr("totalCount"));
			                  var flagNewPage = false;//this has add new query condition,but didn't click query button then click page
			                  var $newPaginationPages;
			                  if(newPaginationTotalCount != pc.totalRecord()){
			                	  flagNewPage = true;
			                	  curPage.val(1);
			                	  $.ajax({
			                		  type: 'POST',
			  						  url:$form.attr("action"),
			  						  data:$form.serializeArray(),
			  						  dataType:"html",
			  						  cache: false,
			  						  async:false,
			  						  success:function(data1){
			  							$newPaginationPages = $(data1).find(".pagination .pagination-pages");
			  							newdata = $(data1).find(".reps-grid tbody").html();
			  							$newTbody = $("<table>"+newdata+"</table>");
			  						  }
			                	  });
			                  }
			                  var flagNoValue = false;
			                  var $ftds = $newTbody.find("td");
			                  if($ftds.size() == 1 && $ftds.eq(0).html() === $.regional.compare.novalue){
			                	  flagNoValue = true;
			                  }
			                  for (var i=0; i < $ftds.size(); i++) {
			  					var $ftd = $($ftds[i]);
			  					$ftd.html("<div><span>" + $ftd.html() + "</span></div>");
			  				  }
			                  var $tbody=$(".gridTbody tbody");
			                  var $firstTh = $(".gridThead thead tr th:first");
			                  var $secondTh = $firstTh.next();
			                  if($secondTh.attr("flagCheckbox") == "checkbox"){
			                	  var $checkbox = $secondTh.find("input[name=seqCheck]");
			                	  if($checkbox.prop("checked")){
			                		  $checkbox.prop("checked",false);
				                  }
			                  }
			                  var flagSeq = false;
			                  var flagSeqCheck = false;
			                  var flagTableChecked = false;
			                  if($firstTh.attr("flagseq") == "true"){
			                	  flagSeq = true;
			                  }
			                  var h=0;
			                  if(flagSeq){
			                	  //have sequence
			                	  $newTbody.find("tbody tr").each(function(i){
			                		  var $this = $(this);
			                		  var numPerPage = pc.pageSize();
			                		  var index;
			                		  if(flagNewPage){
			                			  index = i+1;
			                		  }else{
			                			  index = (numPerPage*(pageNum-1)+i+1);
			                		  }
			                		  if(!flagNoValue){
			                			  $this.prepend("<td align='center' ><div><span>"+index+"</span></div></td>");
			                		  }
			                	  });
			                  }
			                  if(!flagNoValue){
			                	  $tbody.find("tr:first td").each(function(){
				                       $newTbody.find("tr:first td:eq("+h+")").attr("style",$(this).attr("style"));
				                       h++;
				                  });
			                  }
			                  $(".gridTbody tbody").html($newTbody.find("tbody").html());
			                  if(flagNewPage){
			                	  $(".pagination .pagination-pages").html($newPaginationPages.html());
			                  }
			                  
			                  var $trs = $(".gridTbody tbody").find('>tr');
			                  $trs.hoverClass().each(function(i){
			                	  var $tr = $(this);
			                	  $tr.click(function(){
			      					$trs.filter(".selected").removeClass("selected");
			      					$tr.addClass("selected");
			      				});
			                  });
			                  
			                  //after append table body , refresh pagination-nav div
			                  if(flagNewPage){
			                	  curPage.val(1);
			                	  $(".pagination-nav").attr("currentPage",1);
			                	  $(".pagination-nav").attr("totalCount",newPaginationTotalCount);
			                  }else{
			                	  $(".pagination-nav").attr("currentPage",currentPage);
			                  }
			                  
			                  $(".pagination-nav").each(function(){
			      				var $this = $(this);
			      				$this.pagination({
			      					targetType:$this.attr("targetType"),
			      					rel:$this.attr("rel"),
			      					currentPage:$this.attr("currentPage"),
			      					totalCount:$this.attr("totalCount"),
			      					numPerPage:$this.attr("numPerPage"),
			      					pageNumShown:$this.attr("pageNumShown"),
			      					form:$this.attr("form")
			      				});
			      			});
			                // reload dialog js
			                REPS.reloadDialogJs();
			              },
			              error: function (request) {
			                  alert("Connection error");
			              }
					});
					event.preventDefault();
				});
			}
		},
		
		orderBy: function(options){
			var op = $.extend({ targetType:"navTab", rel:"", asc:"asc", desc:"desc"}, options);
			return this.each(function(){
				var $this = $(this).css({cursor:"pointer"}).click(function(){
					var orderField = $this.attr("orderField");
					var orderDirection = $this.hasClass(op.asc) ? op.desc : op.asc;
					//dwzPageBreak({targetType:op.targetType, rel:op.rel, data:{orderField: orderField, orderDirection: orderDirection}});
				});
				
			});
		}
	});
	
	var Pagination = function(opts) {
		this.opts = $.extend({
			targetType:"navTab",
			rel:"", //
			numPerPage:20,
			pageNumShown:10,
			currentPage:1,
			form:"xform",
			totalCount:0,
			callback:function(){return false;}
		}, opts);
	}
	
	$.extend(Pagination.prototype, {
		targetType:function(){return this.opts.targetType},
		form:function(){return this.opts.form},
		rel:function(){return this.opts.rel},
		totalRecord:function(){return this.opts.totalCount},
		pageSize:function(){return this.opts.numPerPage},
		numPages:function() {
			return Math.ceil(this.opts.totalCount/this.opts.numPerPage);
		},
		getInterval:function(){
			var ne_half = Math.ceil(this.opts.pageNumShown/2);
			var np = this.numPages();
			var upper_limit = np - this.opts.pageNumShown;
			var start = this.getCurrentPage() > ne_half ? Math.max( Math.min(this.getCurrentPage() - ne_half, upper_limit), 0 ) : 0;
			var end = this.getCurrentPage() > ne_half ? Math.min(this.getCurrentPage()+ne_half, np) : Math.min(this.opts.pageNumShown, np);
			return {start:start+1, end:end+1};
		},
		getCurrentPage:function(){
			var currentPage = parseInt(this.opts.currentPage);
			if (isNaN(currentPage)) return 1;
			return currentPage;
		},
		hasPrev:function(){
			return this.getCurrentPage() > 1;
		},
		hasNext:function(){
			return this.getCurrentPage() < this.numPages();
		},
		initParameterInForm:function(){
			var form = this.opts.form;
			var $form = $("#"+form);
			var $curPageNumber = $form.find("input[name=curPageNumber]");
			var $pageSize = $form.find("input[name=pageSize]");
			var $totalRecord = $form.find("input[name=totalRecord]");
			if($curPageNumber.size() > 0){
				$curPageNumber.val(this.opts.currentPage);
			}else{
				$form.append('<input type="hidden" name="curPageNumber" value="'+this.opts.currentPage+'" />');
			}
			if($pageSize.size() > 0){
				$pageSize.val(this.opts.numPerPage);
			}else{
				$form.append('<input type="hidden" name="pageSize" value="'+this.opts.numPerPage+'" />');
			}
			if($totalRecord.size() > 0){
				$totalRecord.val(this.opts.totalCount);
			}else{
				$form.append('<input type="hidden" name="totalRecord" value="'+this.opts.totalCount+'" />');
			}
			return $form;
		}
		
	});
})(jQuery);

/**
 * 用于grid分页处理
 */
function paginationNavBreak(formid,opts){
	var opts = $.extend({
		numPerPage:20,
		pageNumShown:10,
		curPageNumber:1,
		form:"xform",
		totalCount:0,
		callback:function(){return false;}
	}, opts);
	$form=$("#"+formid);
	$form.find("input[name='pageSize']").val(opts.numPerPage);
	if(opts.end){
		$form.find("input[name='curPageNumber']").val(opts.curPageNumber);
	}else{
		$form.find("input[name='curPageNumber']").val(1);
	}
	$.ajax({
		type:"post",
		url :　$form.attr("action"),
		data : $form.serializeArray(),
		dataType : "html",
		async:false,
		success : function(html){
			var newdata=$(html).find(".reps-grid tbody").html();
			var $newTbody=$("<table>"+newdata+"</table>");
			var $paginationNav = $(html).find(".pagination .pagination-nav");
			var newPageQueryTotalCount = parseInt($paginationNav.attr("totalCount"));
			var inputTotalCount = parseInt($("input[name=totalRecord]").val());
			var flagNewQuery = false;
			if(newPageQueryTotalCount != inputTotalCount){
				flagNewQuery = true;
				$form.find("input[name='curPageNumber']").val(1);
				$.ajax({
					type:"post",
					url :　$form.attr("action"),
					data : $form.serializeArray(),
					dataType : "html",
					async:false,
					success:function(html1){
						newdata = $(html1).find(".reps-grid tbody").html(); 
						$newTbody = $("<table>"+newdata+"</table>");
					 }
					});
			}
			var $oldTbody = $(".gridTbody tbody");
			var tds = $newTbody.find("td");
			var $firstTh = $(".gridThead thead tr th:first");
			var $secondTh = $firstTh.next();
            if($secondTh.attr("flagCheckbox") == "checkbox"){
          	  var $checkbox = $secondTh.find("input[name=seqCheck]");
          	  if($checkbox.prop("checked")){
          		  $checkbox.prop("checked",false);
              }
            }
			var flagSeq = false;
            if($firstTh.attr("flagseq") == "true"){
          	  flagSeq = true;
            }
            var flagAlign = $firstTh.attr("flagAlign");
            var curPageNumber = parseInt($form.find("input[name=curPageNumber]").val());
            var numPerPage = parseInt(opts.numPerPage);
            if(flagSeq){
          	  //have sequence
              var novalueFlag = false;
              if($newTbody.find("tr:first td:first").html() == $.regional.compare.novalue){
            	  novalueFlag = true;
              }
              if(!novalueFlag){
            	  $newTbody.find("tbody tr").each(function(i){
              		  var $this = $(this);
              		  var index = ((curPageNumber-1) * numPerPage + (i+1));
          			  $this.prepend("<td align='center'><div><span>"+index+"</span></div></td>");
              	  });
              }
            }
            $oldTbody.find("tr:first td").each(function(i){
                 $newTbody.find("tr:first td:eq("+i+")").width($(this).width());
            });
			
			$.each(tds,function(){
				$(this).html("<div><span>"+$(this).html()+"</span></div>")
			});
			$oldTbody.html($newTbody.find("tbody").html());
			
			var $trs = $(".gridTbody tbody").find('>tr');
            $trs.hoverClass().each(function(i){
          	  var $tr = $(this);
          	  $tr.click(function(){
					$trs.filter(".selected").removeClass("selected");
					$tr.addClass("selected");
				});
            });
			
			//then refresh the next and prev 
			$(".pagination-nav").attr("numPerPage",opts.numPerPage);
			if(flagNewQuery){
				$(".pagination-nav").attr("totalCount",newPageQueryTotalCount);
			}
			$(".pagination-nav").attr("currentPage",$form.find("input[name='curPageNumber']").val());
			$(".pagination-nav").each(function(){
				var $this = $(this);
				$this.pagination({
					targetType:$this.attr("targetType"),
					rel:$this.attr("rel"),
					totalCount:$this.attr("totalCount"),
					currentPage:$this.attr("currentPage"),
					numPerPage:$this.attr("numPerPage"),
					pageNumShown:$this.attr("pageNumShown"),
					form:$this.attr("form")
				});
			});
			
			//reload dialog js
            REPS.reloadDialogJs();
		}
	});
}

(function($){
	$.setRegional("datepicker", {
		dayNames:['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
		monthNames:['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
	});

	$.fn.datepicker = function(opts){
		var myMin=null,myMax=null;
		var setting = {
			box$:"#calendar",
			year$:"#calendar [name=year]", month$:"#calendar [name=month]",
			tmInputs$:"#calendar .time :text", hour$:"#calendar .time .hh", minute$:"#calendar .time .mm", second$:"#calendar .time .ss",
			tmBox$:"#calendar .tm", tmUp$:"#calendar .time .up", tmDown$:"#calendar .time .down",
			close$:"#calendar .close", calIcon$:"a.inputDateButton",
			main$:"#calendar .main", days$:"#calendar .days", dayNames$:"#calendar .dayNames",
			clearBut$:"#calendar .clearBut", okBut$:"#calendar .okBut"
		};
		
		var pickerHtml='<div id="calendar">';
		    pickerHtml+='  <div class="main">';
		    pickerHtml+='	  <div class="head">';
		    pickerHtml+='        <table width="100%" border="0" cellpadding="0" cellspacing="2"><tr><td><select name="year"></select></td><td><select name="month"></select></td><td width="20"><span class="close">×</span></td></tr></table>';
		    pickerHtml+='     </div>';
		    pickerHtml+='     <div class="body">';
		    pickerHtml+='        <dl class="dayNames"><dt>Sun</dt><dt>Mon</dt><dt>Tue</dt><dt>Wed</dt><dt>Thu</dt><dt>Fri</dt><dt>Sat</dt></dl>';
		    pickerHtml+='        <dl class="days">日期列表选项</dl>';
		    pickerHtml+='        <div style="clear:both;height:0;line-height:0"></div>';
		    pickerHtml+='     </div>';
		    pickerHtml+='     <div class="foot">';
		    pickerHtml+='          <table class="time"><tr><td><input type="text" class="hh" maxlength="2" start="0" end="23"/>:<input type="text" class="mm" maxlength="2" start="0" end="59"/>:<input type="text" class="ss" maxlength="2" start="0" end="59"/></td><td><ul><li class="up">&and;</li><li class="down">&or;</li></ul></td></tr></table>';
		    pickerHtml+='          <button type="button" class="clearBut">清空</button><button type="button" class="okBut">确定</button>';
		    pickerHtml+='     </div>';
		    pickerHtml+='     <div class="tm">';
		    pickerHtml+='        <ul class="hh"><li>0</li><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li><li>10</li><li>11</li><li>12</li><li>13</li><li>14</li><li>15</li><li>16</li><li>17</li><li>18</li><li>19</li><li>20</li><li>21</li><li>22</li><li>23</li></ul>';
		    pickerHtml+='        <ul class="mm"><li>0</li><li>5</li><li>10</li><li>15</li><li>20</li><li>25</li><li>30</li><li>35</li><li>40</li><li>45</li><li>50</li><li>55</li></ul>';
		    pickerHtml+='        <ul class="ss"><li>0</li><li>10</li><li>20</li><li>30</li><li>40</li><li>50</li></ul>';
		    pickerHtml+='     </div>';
		    pickerHtml+='  </div>';
		    pickerHtml+='</div>';
		
		function changeTmMenu(sltClass){
			var $tm = $(setting.tmBox$);
			$tm.removeClass("hh").removeClass("mm").removeClass("ss");
			if (sltClass) {
				$tm.addClass(sltClass);
				$(setting.tmInputs$).removeClass("slt").filter("." + sltClass).addClass("slt");
			}
		}
		function clickTmMenu($input, type){
			$(setting.tmBox$).find("."+type+" li").each(function(){
				var $li = $(this);
				$li.click(function(){
					$input.val($li.text());
				});
			});
		}
		function keydownInt(e){
			if (!((e.keyCode >= 48 && e.keyCode <= 57) || (e.keyCode == REPS.keyCode.DELETE || e.keyCode == REPS.keyCode.BACKSPACE))) { return false; }
		}
		function changeTm($input, type){
			var ivalue = parseInt($input.val()), istart = parseInt($input.attr("start")) || 0, iend = parseInt($input.attr("end"));
			var istep = parseInt($input.attr('step') || 1);
			if (type == 1) {
				if (ivalue <= iend-istep){$input.val(ivalue + istep);}
			} else if (type == -1){
				if (ivalue >= istart+istep){$input.val(ivalue - istep);}
			} else if (ivalue > iend) {
				$input.val(iend);
			} else if (ivalue < istart) {
				$input.val(istart);
			}
		}
				
		return this.each(function(){
			
			var $this = $(this);
			var opts = {};
			if ($this.attr("dateFmt")) opts.pattern = $this.attr("dateFmt");
			if ($this.attr("minDate")) opts.minDate = $this.attr("minDate");
			if ($this.attr("maxDate")) opts.maxDate = $this.attr("maxDate");
			if ($this.attr("mmStep")) opts.mmStep = $this.attr("mmStep");
			if ($this.attr("ssStep")) opts.ssStep = $this.attr("ssStep");

			if(opts.maxDate && opts.maxDate.indexOf("#")>-1){
				myMin=opts.maxDate;
				opts.maxDate=$(opts.maxDate).val();
				//opts.maxDate=null;
			}
		    
			if(opts.minDate && opts.minDate.indexOf("#")>-1){
				myMax=opts.minDate;
				opts.minDate=$(opts.minDate).val();
				//opts.minDate=null;
			}
		    
			
			var dp = new Datepicker($this.val(), opts);
			
			function generateCalendar(dp){
				var dw = dp.getDateWrap();
				var minDate = dp.getMinDate();
				var maxDate = dp.getMaxDate();

				var monthStart = new Date(dw.year,dw.month-1,1);
				var startDay = monthStart.getDay();
				var dayStr="";
				if (startDay > 0){
					monthStart.setMonth(monthStart.getMonth() - 1);
					var prevDateWrap = dp.getDateWrap(monthStart);
					for(var t=prevDateWrap.days-startDay+1;t<=prevDateWrap.days;t++) {
						var _date = new Date(dw.year,dw.month-2,t);
						var _ctrClass = (_date >= minDate && _date <= maxDate) ? '' : 'disabled';
						dayStr+='<dd class="other '+_ctrClass+'" chMonth="-1" day="' + t + '">'+t+'</dd>';
					}
				}
				for(var t=1;t<=dw.days;t++){
					var _date = new Date(dw.year,dw.month-1,t);
					var _ctrClass = (_date >= minDate && _date <= maxDate) ? '' : 'disabled';
					if(t==dw.day){
						dayStr+='<dd class="slt '+_ctrClass+'" day="' + t + '">'+t+'</dd>';
					}else{
						dayStr+='<dd class="'+_ctrClass+'" day="' + t + '">'+t+'</dd>';
					}
				}
				for(var t=1;t<=42-startDay-dw.days;t++){
					var _date = new Date(dw.year,dw.month,t);
					var _ctrClass = (_date >= minDate && _date <= maxDate) ? '' : 'disabled';
					dayStr+='<dd class="other '+_ctrClass+'" chMonth="1" day="' + t + '">'+t+'</dd>';
				}
				
				var $days = $(setting.days$).html(dayStr).find("dd");
				$days.not('.disabled').click(function(){
					var $day = $(this);
					
					if (!dp.hasTime()) {
						$this.val(dp.formatDate(dp.changeDay($day.attr("day"), $day.attr("chMonth"))));
						closeCalendar(); 
					} else {
						$days.removeClass("slt");
						$day.addClass("slt");
					}
				});

				if (!dp.hasDate()) $(setting.main$).addClass('nodate'); // 仅时间，无日期
				
				if (dp.hasTime()) {
					$("#calendar .time").show();
					
					var $hour = $(setting.hour$).val(dw.hour).focus(function(){
						changeTmMenu("hh");
					});
					var iMinute = parseInt(dw.minute / dp.opts.mmStep) * dp.opts.mmStep;
					var $minute = $(setting.minute$).val(iMinute).attr('step',dp.opts.mmStep).focus(function(){
						changeTmMenu("mm");
					});
					var $second = $(setting.second$).val(dp.hasSecond() ? dw.second : 0).attr('step',dp.opts.ssStep).focus(function(){
						changeTmMenu("ss");
					});
					
					$hour.add($minute).add($second).click(function(){return false});
					
					clickTmMenu($hour,"hh");
					clickTmMenu($minute,"mm");
					clickTmMenu($second,"ss");
					$(setting.box$).click(function(){
						changeTmMenu();
					});
					
					var $inputs = $(setting.tmInputs$);
					$inputs.keydown(keydownInt).each(function(){
						var $input = $(this);
						$input.keyup(function(){
							changeTm($input, 0);
						});
					});
					$(setting.tmUp$).click(function(){
						$inputs.filter(".slt").each(function(){
							changeTm($(this), 1);
						});
					});
					$(setting.tmDown$).click(function(){
						$inputs.filter(".slt").each(function(){
							changeTm($(this), -1);
						});
					});
					
					if (!dp.hasHour()) $hour.attr("disabled",true);
					if (!dp.hasMinute()) $minute.attr("disabled",true);
					if (!dp.hasSecond()) $second.attr("disabled",true);
				}
				
			}
			
			function closeCalendar() {
				$(setting.box$).remove();
				$(document).unbind("click", closeCalendar);
			}

			$this.click(function(event){
				closeCalendar();
				var dp = new Datepicker($this.val(), opts);
				var offset = $this.offset();
				var iTop = offset.top+this.offsetHeight;
				//alert(pickerHtml);
				$(pickerHtml).appendTo("body").css({
					left:offset.left+'px',
					top:iTop+'px'
				}).show().click(function(event){
					event.stopPropagation();
				});
				
				($.fn.bgiframe && $(setting.box$).bgiframe());
				
				var dayNames = "";
				$.each($.regional.datepicker.dayNames, function(i,v){
					dayNames += "<dt>" + v + "</dt>"
				});
				$(setting.dayNames$).html(dayNames);
				
				var dw = dp.getDateWrap();
				var $year = $(setting.year$);
				var yearstart = dp.getMinDate().getFullYear();
				var yearend = dp.getMaxDate().getFullYear();
				for(y=yearstart; y<=yearend; y++){
					$year.append('<option value="'+ y +'"'+ (dw.year==y ? 'selected="selected"' : '') +'>'+ y +'</option>');
				}
				var $month = $(setting.month$);
				$.each($.regional.datepicker.monthNames, function(i,v){
					var m = i+1;
					$month.append('<option value="'+ m +'"'+ (dw.month==m ? 'selected="selected"' : '') +'>'+ v +'</option>');
				});
				
				// generate calendar
				generateCalendar(dp);
				$year.add($month).change(function(){
					dp.changeDate($year.val(), $month.val());
					generateCalendar(dp);
				});
				
				// fix top
				var iBoxH = $(setting.box$).outerHeight(true);
				if (iTop > iBoxH && iTop > $(window).height()-iBoxH) {
					$(setting.box$).css("top", offset.top - iBoxH);
				}
				
				$(setting.close$).click(function(){
					closeCalendar();
				});
				$(setting.clearBut$).click(function(){
					$this.val("");
					closeCalendar();
				});
				$(setting.okBut$).click(function(){
					var $dd = $(setting.days$).find("dd.slt");
					
					if ($dd.hasClass("disabled")) return false;
					
					var date = dp.changeDay($dd.attr("day"), $dd.attr("chMonth"));
					
					if (dp.hasTime()) {
					 	date.setHours(parseInt($(setting.hour$).val()));
						date.setMinutes(parseInt($(setting.minute$).val()));
						date.setSeconds(parseInt($(setting.second$).val()));
					}
					
					$this.val(dp.formatDate(date));
					closeCalendar();
				});
				$(document).bind("click", closeCalendar);
				return false;
			});
			
			$this.parent().find(setting.calIcon$).click(function(){
				$this.trigger("click");
				return false;
			});
		});
		
	}

	var Datepicker = function(sDate, opts) {
		this.opts = $.extend({
			pattern:'yyyy-MM-dd',
			minDate:"1900-01-01",
			maxDate:"2099-12-31",
			mmStep:1,
			ssStep:1
		}, opts);
		
		
		
		//动态minDate、maxDate
		var now = new Date();
		this.opts.minDate = now.formatDateTm(this.opts.minDate);
		this.opts.maxDate = now.formatDateTm(this.opts.maxDate);
		
		this.sDate = sDate.trim();
	}
	
	$.extend(Datepicker.prototype, {
		get: function(name) {
			return this.opts[name];
		},
		_getDays: function (y,m){//获取某年某月的天数

			return m==2?(y%4||!(y%100)&&y%400?28:29):(/4|6|9|11/.test(m)?30:31);
		},

		_minMaxDate: function(sDate){
			var _count = sDate.split('-').length -1;
			var _format = 'y-M-d';
			if (_count == 1) _format = 'y-M';
			else if (_count == 0) _format = 'y';
			
			return sDate.parseDate(_format);
		},
		getMinDate: function(){
//			alert("前="+this.opts.minDate);
//			if(this.opts.minDate.length>0){
//			    if(this.opts.minDate.indexOf("#")>-1){
//			    	this.opts.minDate=$(this.opts.minDate).val();
//			    }
//			}
//			alert("后="+this.opts.minDate);
			return this._minMaxDate(this.opts.minDate);
		},
		getMaxDate: function(){
//			if(this.opts.maxDate){
//			    if(this.opts.maxDate.indexOf("#")>-1){
//			    	this.opts.maxDate=$(this.opts.maxDate).val();
//			    }
//			}
			var _sDate = this.opts.maxDate;
			var _count = _sDate.split('-').length -1;
			var _date = this._minMaxDate(_sDate);
			
			if (_count < 2) { //format:y-M、y

				var _day = this._getDays(_date.getFullYear(), _date.getMonth()+1);
				_date.setDate(_day);
				if (_count == 0) {//format:y

					_date.setMonth(11);
				}
			}

			return _date;
		},
		getDateWrap: function(date){ //得到年,月,日

			if (!date) date = this.parseDate(this.sDate) || new Date();
			var y = date.getFullYear();
			var m = date.getMonth()+1;
			var days = this._getDays(y,m);
			return {
				year:y, month:m, day:date.getDate(),
				hour:date.getHours(),minute:date.getMinutes(),second:date.getSeconds(),
				days: days, date:date
			}
		},
		/**
		 * @param {year:2010, month:05, day:24}
		 */
		changeDate: function(y, m, d){
			var date = new Date(y, m - 1, d || 1);
			this.sDate = this.formatDate(date);
			return date;
		},
		changeDay: function(day, chMonth){
			if (!chMonth) chMonth = 0;
			var dw = this.getDateWrap();
			return this.changeDate(dw.year, dw.month+parseInt(chMonth), day);
		},
		parseDate: function(sDate){
			if (!sDate) return null;
			return sDate.parseDate(this.opts.pattern);
		},
		formatDate: function(date){
			return date.formatDate(this.opts.pattern);
		},
		hasHour: function() {
			return this.opts.pattern.indexOf("H") != -1;
		},
		hasMinute: function() {
			return this.opts.pattern.indexOf("m") != -1;
		},
		hasSecond: function() {
			return this.opts.pattern.indexOf("s") != -1;
		},
		hasTime: function() {
			return this.hasHour() || this.hasMinute() || this.hasSecond();
		},
		hasDate: function() {
			var _dateKeys = ['y','M','d','E'];
			for (var i=0; i<_dateKeys.length; i++){
				if (this.opts.pattern.indexOf(_dateKeys[i]) != -1) return true;
			}

			return false;
		}
	});
})(jQuery);
 /**
 * @author ZhangHuihua@msn.com
 * ----------------------------------------------------------
 * These functions use the same 'format' strings as the 
 * java.text.SimpleDateFormat class, with minor exceptions.
 * The format string consists of the following abbreviations:
 * 
 * Field        | Full Form          | Short Form
 * -------------+--------------------+-----------------------
 * Year         | yyyy (4 digits)    | yy (2 digits), y (2 or 4 digits)
 * Month        | MMM (name or abbr.)| MM (2 digits), M (1 or 2 digits)
 *              | NNN (abbr.)        |
 * Day of Month | dd (2 digits)      | d (1 or 2 digits)
 * Day of Week  | EE (name)          | E (abbr)
 * Hour (1-12)  | hh (2 digits)      | h (1 or 2 digits)
 * Hour (0-23)  | HH (2 digits)      | H (1 or 2 digits)
 * Hour (0-11)  | KK (2 digits)      | K (1 or 2 digits)
 * Hour (1-24)  | kk (2 digits)      | k (1 or 2 digits)
 * Minute       | mm (2 digits)      | m (1 or 2 digits)
 * Second       | ss (2 digits)      | s (1 or 2 digits)
 * AM/PM        | a                  |
 *
 * NOTE THE DIFFERENCE BETWEEN MM and mm! Month=MM, not mm!
 * Examples:
 *  "MMM d, y" matches: January 01, 2000
 *                      Dec 1, 1900
 *                      Nov 20, 00
 *  "M/d/yy"   matches: 01/20/00
 *                      9/2/00
 *  "MMM dd, yyyy hh:mm:ssa" matches: "January 01, 2000 12:30:45AM"
 * ----------------------------------------------------------
 */
(function(){
var MONTH_NAMES=new Array('January','February','March','April','May','June','July','August','September','October','November','December','Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec');
var DAY_NAMES=new Array('Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sun','Mon','Tue','Wed','Thu','Fri','Sat');
function LZ(x) {return(x<0||x>9?"":"0")+x}

/**
 * formatDate (date_object, format)
 * Returns a date in the output format specified.
 * The format string uses the same abbreviations as in parseDate()
 * @param {Object} date
 * @param {Object} format
 */
function formatDate(date,format) {
	format=format+"";
	var result="";
	var i_format=0;
	var c="";
	var token="";
	var y=date.getYear()+"";
	var M=date.getMonth()+1;
	var d=date.getDate();
	var E=date.getDay();
	var H=date.getHours();
	var m=date.getMinutes();
	var s=date.getSeconds();
	var yyyy,yy,MMM,MM,dd,hh,h,mm,ss,ampm,HH,H,KK,K,kk,k;
	// Convert real date parts into formatted versions
	var value={};
	if (y.length < 4) {y=""+(y-0+1900);}
	value["y"]=""+y;
	value["yyyy"]=y;
	value["yy"]=y.substring(2,4);
	value["M"]=M;
	value["MM"]=LZ(M);
	value["MMM"]=MONTH_NAMES[M-1];
	value["NNN"]=MONTH_NAMES[M+11];
	value["d"]=d;
	value["dd"]=LZ(d);
	value["E"]=DAY_NAMES[E+7];
	value["EE"]=DAY_NAMES[E];
	value["H"]=H;
	value["HH"]=LZ(H);
	if (H==0){value["h"]=12;}
	else if (H>12){value["h"]=H-12;}
	else {value["h"]=H;}
	value["hh"]=LZ(value["h"]);
	if (H>11){value["K"]=H-12;} else {value["K"]=H;}
	value["k"]=H+1;
	value["KK"]=LZ(value["K"]);
	value["kk"]=LZ(value["k"]);
	if (H > 11) { value["a"]="PM"; }
	else { value["a"]="AM"; }
	value["m"]=m;
	value["mm"]=LZ(m);
	value["s"]=s;
	value["ss"]=LZ(s);
	while (i_format < format.length) {
		c=format.charAt(i_format);
		token="";
		while ((format.charAt(i_format)==c) && (i_format < format.length)) {
			token += format.charAt(i_format++);
		}
		if (value[token] != null) { result += value[token]; }
		else { result += token; }
	}
	return result;
}

function _isInteger(val) {
	return (new RegExp(/^\d+$/).test(val));
}
function _getInt(str,i,minlength,maxlength) {
	for (var x=maxlength; x>=minlength; x--) {
		var token=str.substring(i,i+x);
		if (token.length < minlength) { return null; }
		if (_isInteger(token)) { return token; }
	}
	return null;
}

/**
 * parseDate( date_string , format_string )
 * 
 * This function takes a date string and a format string. It matches
 * If the date string matches the format string, it returns the date. 
 * If it does not match, it returns 0.
 * @param {Object} val
 * @param {Object} format
 */
function parseDate(val,format) {
	val=val+"";
	format=format+"";
	var i_val=0;
	var i_format=0;
	var c="";
	var token="";
	var token2="";
	var x,y;
	var now=new Date(1900,0,1);
	var year=now.getYear();
	var month=now.getMonth()+1;
	var date=1;
	var hh=now.getHours();
	var mm=now.getMinutes();
	var ss=now.getSeconds();
	var ampm="";
	
	while (i_format < format.length) {
		// Get next token from format string
		c=format.charAt(i_format);
		token="";
		while ((format.charAt(i_format)==c) && (i_format < format.length)) {
			token += format.charAt(i_format++);
		}
		// Extract contents of value based on format token
		if (token=="yyyy" || token=="yy" || token=="y") {
			if (token=="yyyy") { x=4;y=4; }
			if (token=="yy")   { x=2;y=2; }
			if (token=="y")    { x=2;y=4; }
			year=_getInt(val,i_val,x,y);
			if (year==null) { return 0; }
			i_val += year.length;
			if (year.length==2) {
				if (year > 70) { year=1900+(year-0); }
				else { year=2000+(year-0); }
			}
		} else if (token=="MMM"||token=="NNN"){
			month=0;
			for (var i=0; i<MONTH_NAMES.length; i++) {
				var month_name=MONTH_NAMES[i];
				if (val.substring(i_val,i_val+month_name.length).toLowerCase()==month_name.toLowerCase()) {
					if (token=="MMM"||(token=="NNN"&&i>11)) {
						month=i+1;
						if (month>12) { month -= 12; }
						i_val += month_name.length;
						break;
						}
					}
				}
			if ((month < 1)||(month>12)){return 0;}
		} else if (token=="EE"||token=="E"){
			for (var i=0; i<DAY_NAMES.length; i++) {
				var day_name=DAY_NAMES[i];
				if (val.substring(i_val,i_val+day_name.length).toLowerCase()==day_name.toLowerCase()) {
					i_val += day_name.length;
					break;
				}
			}
		} else if (token=="MM"||token=="M") {
			month=_getInt(val,i_val,token.length,2);
			if(month==null||(month<1)||(month>12)){return 0;}
			i_val+=month.length;
		} else if (token=="dd"||token=="d") {
			date=_getInt(val,i_val,token.length,2);
			if(date==null||(date<1)||(date>31)){return 0;}
			i_val+=date.length;
		} else if (token=="hh"||token=="h") {
			hh=_getInt(val,i_val,token.length,2);
			if(hh==null||(hh<1)||(hh>12)){return 0;}
			i_val+=hh.length;
		} else if (token=="HH"||token=="H") {
			hh=_getInt(val,i_val,token.length,2);
			if(hh==null||(hh<0)||(hh>23)){return 0;}
			i_val+=hh.length;}
		else if (token=="KK"||token=="K") {
			hh=_getInt(val,i_val,token.length,2);
			if(hh==null||(hh<0)||(hh>11)){return 0;}
			i_val+=hh.length;
		} else if (token=="kk"||token=="k") {
			hh=_getInt(val,i_val,token.length,2);
			if(hh==null||(hh<1)||(hh>24)){return 0;}
			i_val+=hh.length;hh--;
		} else if (token=="mm"||token=="m") {
			mm=_getInt(val,i_val,token.length,2);
			if(mm==null||(mm<0)||(mm>59)){return 0;}
			i_val+=mm.length;
		} else if (token=="ss"||token=="s") {
			ss=_getInt(val,i_val,token.length,2);
			if(ss==null||(ss<0)||(ss>59)){return 0;}
			i_val+=ss.length;
		} else if (token=="a") {
			if (val.substring(i_val,i_val+2).toLowerCase()=="am") {ampm="AM";}
			else if (val.substring(i_val,i_val+2).toLowerCase()=="pm") {ampm="PM";}
			else {return 0;}
			i_val+=2;
		} else {
			if (val.substring(i_val,i_val+token.length)!=token) {return 0;}
			else {i_val+=token.length;}
		}
	}
	// If there are any trailing characters left in the value, it doesn't match
	if (i_val != val.length) { return 0; }
	// Is date valid for month?
	if (month==2) {
		// Check for leap year
		if ( ( (year%4==0)&&(year%100 != 0) ) || (year%400==0) ) { // leap year
			if (date > 29){ return 0; }
		} else { if (date > 28) { return 0; } }
	}
	if ((month==4)||(month==6)||(month==9)||(month==11)) {
		if (date > 30) { return 0; }
	}
	// Correct hours value
	if (hh<12 && ampm=="PM") { hh=hh-0+12; }
	else if (hh>11 && ampm=="AM") { hh-=12; }
	return new Date(year,month-1,date,hh,mm,ss);
}

Date.prototype.formatDate = function(dateFmt) {
	return formatDate(this, dateFmt);
};
String.prototype.parseDate = function(dateFmt) {
	if (this.length < dateFmt.length) {
		dateFmt = dateFmt.slice(0,this.length);
	}
	return parseDate(this, dateFmt);
};

/**
 * replaceTmEval("{1+2}-{2-1}")
 */
function replaceTmEval(data){
	return data.replace(RegExp("({[A-Za-z0-9_+-]*})","g"), function($1){
		return eval('(' + $1.replace(/[{}]+/g, "") + ')');
	});
}
/**
 * dateFmt:%y-%M-%d
 * %y-%M-{%d+1}
 * ex: new Date().formatDateTm('%y-%M-{%d-1}')
 * 	new Date().formatDateTm('2012-1')
 */
Date.prototype.formatDateTm = function(dateFmt) {
	var y = this.getFullYear();
	var m = this.getMonth()+1;
	var d = this.getDate();

	var sDate = dateFmt.replaceAll("%y",y).replaceAll("%M",m).replaceAll("%d",d);
	sDate = replaceTmEval(sDate);
	
	var _y=1900, _m=0, _d=1;
	var aDate = sDate.split('-');
	
	if (aDate.length > 0) _y = aDate[0];
	if (aDate.length > 1) _m = aDate[1]-1;
	if (aDate.length > 2) _d = aDate[2];
	
	return new Date(_y,_m,_d).formatDate('yyyy-MM-dd');
};

})();

/**
 * @author ZhangHuihua@msn.com
 */
(function($){
	$.fn.extend({
		
		checkboxCtrl: function(parent){
			return this.each(function(){
				var $trigger = $(this);
				$trigger.click(function(){
					var group = $trigger.attr("group");
					if ($trigger.is(":checkbox")) {
						var type = $trigger.is(":checked") ? "all" : "none";
						if (group) $.checkbox.select(group, type, parent);
					} else {
						if (group) $.checkbox.select(group, $trigger.attr("selectType") || "all", parent);
					}
					
				});
			});
		}
	});
	
	$.checkbox = {
		selectAll: function(_name, _parent){
			this.select(_name, "all", _parent);
		},
		unSelectAll: function(_name, _parent){
			this.select(_name, "none", _parent);
		},
		selectInvert: function(_name, _parent){
			this.select(_name, "invert", _parent);
		},
		select: function(_name, _type, _parent){
			$parent = $(_parent || document);
			$checkboxLi = $parent.find(":checkbox[name='"+_name+"']");
			switch(_type){
				case "invert":
					$checkboxLi.each(function(){
						$checkbox = $(this);
						$checkbox.attr('checked', !$checkbox.is(":checked"));
					});
					break;
				case "none":
					$checkboxLi.attr('checked', false);
					break;
				default:
					$checkboxLi.attr('checked', true);
					break;
			}
		}
	};
})(jQuery);
(function($){
	var allSelectBox = [];
	var killAllBox = function(bid){
		$.each(allSelectBox, function(i){
			if (allSelectBox[i] != bid) {
				if (!$("#" + allSelectBox[i])[0]) {
					$("#op_" + allSelectBox[i]).remove();
					//allSelectBox.splice(i,1);
				} else {
					$("#op_" + allSelectBox[i]).css({ height: "", width: "" }).hide();
				}
				$(document).unbind("click", killAllBox);
			}
		});
	};
	
	var _onchange = function (event){
		var $ref = $("#"+event.data.ref);
		if ($ref.size() == 0) return false;
		$.ajax({
			type:'POST', dataType:"json", url:event.data.refUrl.replace("{value}", encodeURIComponent(event.data.$this.attr("value"))), cache: false,
			data:{},
			success: function(json){
				if (!json) return;
				var html = '';

				$.each(json, function(i){
					if (json[i] && json[i].length > 1){
						html += '<option value="'+json[i][0]+'">' + json[i][1] + '</option>';
					}
				});
				
				var $refCombox = $ref.parents("div.combox:first");
				$ref.html(html).insertAfter($refCombox);
				$refCombox.remove();
				$ref.trigger("change").combox();
			},
			error: REPS.ajaxError
		});
	};
					
	$.extend($.fn, {
		comboxSelect: function(options){
			var op = $.extend({ selector: ">a" }, options);
			
			return this.each(function(){
				var box = $(this);
				var selector = $(op.selector, box);

				allSelectBox.push(box.attr("id"));
				$(op.selector, box).click(function(){
					var options = $("#op_"+box.attr("id"));
					if (options.is(":hidden")) {
						if(options.height() > 300) {
							options.css({height:"300px",overflow:"scroll"});
						}
						var top = box.offset().top+box[0].offsetHeight-50;
						if(top + options.height() > $(window).height() - 20) {
							top =  $(window).height() - 20 - options.height();
						}
						options.css({top:top,left:box.offset().left}).show();
						killAllBox(box.attr("id"));
						$(document).click(killAllBox);
					} else {
						$(document).unbind("click", killAllBox);
						killAllBox();
					}
					return false;
				});
				$("#op_"+box.attr("id")).find(">li").comboxOption(selector, box);		
			});
		},
		comboxOption: function(selector, box){
			return this.each(function(){
				$(">a", this).click(function(){
					var $this = $(this);
					$this.parent().parent().find(".selected").removeClass("selected");
					$this.addClass("selected");
					selector.text($this.text());
					
					var $input = $("select", box);
					if ($input.val() != $this.attr("value")) {
						$("select", box).val($this.attr("value")).trigger("change");
					}
				});
			});
		},
		combox:function(){
			/* 清理下拉层 */
			var _selectBox = [];
			$.each(allSelectBox, function(i){ 
				if ($("#" + allSelectBox[i])[0]) {
					_selectBox.push(allSelectBox[i]);
				} else {
					$("#op_" + allSelectBox[i]).remove();
				}
			});
			allSelectBox = _selectBox;
			
			return this.each(function(i){
				var $this = $(this).removeClass("combox");
				var name = $this.attr("name");
				var value= $this.val();
				var label = $("option[value=" + value + "]",$this).text();
				var ref = $this.attr("ref");
				var refUrl = $this.attr("refUrl") || "";

				var cid = $this.attr("id") || Math.round(Math.random()*10000000);
				var select = '<div class="combox"><div id="combox_'+ cid +'" class="select"' + (ref?' ref="' + ref + '"' : '') + '>';
				select += '<a href="javascript:" class="'+$this.attr("class")+'" name="' + name +'" value="' + value + '">' + label +'</a></div></div>';
				var options = '<ul class="comboxop" id="op_combox_'+ cid +'">';
				$("option", $this).each(function(){
					var option = $(this);
					options +="<li><a class=\""+ (value==option[0].value?"selected":"") +"\" href=\"#\" value=\"" + option[0].value + "\">" + option[0].text + "</a></li>";
				});
				options +="</ul>";
				
				$("body").append(options);
				$this.after(select);
				$("div.select", $this.next()).comboxSelect().append($this);
				
				if (ref && refUrl) {
					$this.unbind("change", _onchange).bind("change", {ref:ref, refUrl:refUrl, $this:$this}, _onchange);
				}
				
			});
		}
	});
})(jQuery);
(function($){
	$.fn.repscombobox = function(opt,data){
		if(typeof(opt)=='string'){
			return $.fn.repscombobox.method[opt](this,data);
		}
		else{
			return $.fn.repscombobox.method.init(this,opt,data);
		}
	};
	$.fn.repscombobox.defaults={panels:{},valueField:'id',textField:'text',width:'auto',panelWidth:'auto',panelHeight:150,
			value:null,multiple:false,separator:',',editable:true,disabled:false,maxOptions:50,
			filter:function(key,row){
				if(!key)return {position:0,length:0};
				if((pos=row[this.textField].indexOf(key))>=0){
					var ary = [key];ary.position=pos;
					return ary;
				}
				return false;
			}
	};
	$.fn.repscombobox.method={
			init:function(target,options,data){
				return init(target,options,data);
			},
			options:function(target){
				return target.data('options');
			},
			getValue:function(target){
				return $(target[0]).data('scombo-val').val();
			},
			getValues:function(target){
				return $(target[0]).data('scombo-val').val().split($(target[0]).data('options').separator);
			},
			getText:function(target){
				return target.val();
			},
			setValue:function(target,val){
				validate(target,true);
				var valInput = $(target[0]).data('scombo-val').val(val);
				changeEvt($(target[0]),valInput);
				return target;
			},
			setValues:function(target,val){
				validate(target,true);
				var valInput = $(target[0]).data('scombo-val').val(val.constructor==Array?val.join($(target[0]).data('options').separator):val);
				changeEvt($(target[0]),valInput);
				return target;
			},
			setText:function(target,text){
				validate(target,true);
				return target.val(text);
			},
			valuebox:function(target){
				return target.data('scombo-val');
			},
			remove:function(target){
				target.data('scombo-val').remove();
				return target.remove();
			},
			showPanel:function(target,event){
				return showPanel(target,event);
			},
			hidePanel:function(target){
				validate(target,true);
				var th = $(target),div=th.data('scombo-panel');
				div.hide();
				changeEvt(th);
				return th;
			},
			disable:function(target){
				target.data('options').disabled=true;
				$(document).trigger('click',[true]);
				return target.attr('disabled',true);
			},
			enable:function(target){
				target.data('options').disabled=false;
				validate(target,true);
				return target.attr('disabled',false);
			},
			editable:function(target,editable){
				target.data('options').editable=editable;
				validate(target,true);
				return target;
			}
	};
	function init(target,options,data){
		var headerData = $.extend({"id":null,"name":null,"headerValue":null,"headerText":null},$.parseJSON(data));
		
		var hideName = headerData.name;
		var showHeaderId = headerData.id;
		var headerValue = headerData.headerValue;
		var headerText = headerData.headerText;
		
		var opt = $.extend({},$.fn.repscombobox.defaults,options);
		target.attr('autocomplete', 'off').data('options',opt).unbind('.scombo');
		if(!$.fn.repscombobox.defaults._panel){
			var div =$.fn.repscombobox.defaults._panel= $('<div class="scombo-panel"></div>').appendTo('body').bind('mousedown',function(){return false;});
			div.hide();
		}
		target.bind('dataloaded.scombo',dataloadedEvent);
		validate(target,true);
		target.data('scombo-panel',$.fn.repscombobox.defaults._panel);
		target.each(function(){
			var th=$(this),opt=$.extend({},$.fn.repscombobox.defaults,parseOption(this),options);
			th.data('options',opt);
			var valInput = $('<input type=hidden >').attr('name',th.attr('name')).insertBefore(this);
			if(th.attr('tagName')=='select'){
				th = $('<input type=text autocomplete=off>').insertBefore(this).bind('dataloaded.scombo',dataloadedEvent).data('options',opt).data('scombo-panel',$.fn.repscombobox.defaults._panel);
				var domAttrs = {type:true,outerHTML:true,innerHTML:true,outerText:true,innerText:true,tagName:true,textContent:true,localName:true,nodeName:true,baseURI:true,namespaceURI:true};
				for(var p in this){
					try{if(this[p]&&!domAttrs[p]&&typeof(this[p])=='string')th.attr(p,this[p]);}catch(e){;}
				}
				th.attr('style',$(this).attr('style'));
				$(this).remove();
				target.push(th[0]);
			}
			valInput.val(getVal(opt.value,th.val()));
			th.addClass('scombo-box').attr('readonly',opt.disabled).attr('scombo-name',th.attr('name')).removeAttr('name').val('')
					.data('scombo-val',valInput).data('old-val',valInput.val()).bind('click.scombo focus.scombo paste.scombo keyup.scombo type.scombo',function(event){
				$.fn.repscombobox.method.showPanel(this,event);return $.event.fix(event).type=='paste';
			});
			if(opt.width&&opt.width!='auto'){
				var wid=getVal(opt.width,th.outerWidth());
				if(th.outerWidth()!=wid){
					th.width(wid-(th.outerWidth()-wid)).height(18);
				}
			}
			if(null != hideName && null != showHeaderId){
				$("input[name='"+hideName+"']").val(headerValue);
				$("#"+showHeaderId).val(headerText);
			}
		});
		if(opt.url){
			$.post(opt.url,opt.params,function(data){
				try{
					var ary = $.parseJSON(data);
				}
				catch(e){;}
				opt.data = ary||data;
				target.trigger('dataloaded');
			});
		}
		else{
			target.trigger('dataloaded');
		}
		return target;
	}
	function showPanel(target,event){
		var th = $(target),div=th.data('scombo-panel'),opt=th.data('options');
		if(!opt||opt.disabled)return th;
		var pos = th.offset();
		pos.top+=th.outerHeight()+2;
		pos.width = getVal(opt.panelWidth,th.outerWidth()-1);
		pos.height = getVal(opt.panelHeight,'');
		div.css(pos);
		if(event){
			var evt = $.event.fix(event),kc=evt.keyCode;
			if(evt.type!='click'&&evt.type!='focus'){
				if(kc==13){
					if((item=$('.hover',div)).length>0){
						th.val(item.text());
						th.data('scombo-val').val(item.attr('value'));
						th.removeData('keypress');
						$(document).trigger('click',[true]);
						return;
					}
				}
				else if(kc==38){
					if($('.hover',div).length==0){
						var item=$('.scombo-item:last',div).addClass('hover');
						makeCenter(div,$('.hover:first',div));
					}
					else{
						var item = $('.hover',div);
						if(item.prev().length>0){
							makeCenter(div,$('.hover:first',div));
							item.removeClass('hover').prev().addClass('hover');
						}
					}
					return;
				}
				else if(kc==40){
					if($('.hover',div).length==0){
						$('.scombo-item:first',div).addClass('hover');
						makeCenter(div,$('.hover:first',div));
					}
					else{
						var item = $('.hover',div);
						if(item.next().length>0){
							makeCenter(div,$('.hover:first',div));
							item.removeClass('hover').next().addClass('hover');
						}
					}
					return;
				}
				else if(kc==8||kc==32||(kc>=48&&kc<=111)||kc>=186){
					th.data('keypress',1);
				}
			}
		}
		var key = event&&(evt.type=='keyup'||evt.type=='type')?th.val():null;
		if((div.data('scombo-box')&&div.data('scombo-box')[0]!=th[0])||div.data('scombo-box',th).css('display')=='none'){
			if(div.data('scombo-box')&&div.data('scombo-box')[0]!=th[0]){
				$(document).trigger('click',[true]);
				div.data('scombo-box',th);
			}
			$(document).bind('mousedown.scombo',function (event,hidePanel){
				var obj = $($.event.fix(event).target);
				if(!$.fn.repscombobox.defaults._panel){
					return;
				}
				var th = $.fn.repscombobox.defaults._panel.data('scombo-box');
				if(!hidePanel&&th[0]==obj[0]){
					return;
				}
				var opt = th.data('options');
				if(th.data('keypress')){
					if(opt.editable){
						th.data('scombo-val').val(th.val());
					}
					else{
						var text = '',vals=th.data('scombo-val').val().split(opt.separator);
						for(var i=0;i<opt.data.length;i++){
							if((pos=vals.indexOf(opt.data[i][opt.valueField]))>=0){
								text+=opt.separator+opt.data[i][opt.textField];
								vals.splice(pos,1);
							}
						}
						th.val(text.substr(opt.separator.length));
					}
				}
				changeEvt(th);
				$.fn.repscombobox.defaults._panel.removeData('last-key').removeData('keypress').hide();
				$(document).unbind('mousedown.scombo');
			});
			fillData(div,opt,null);
		}
		if(div.data('last-key')!=key){
			div.data('last-key',key);
			fillData(div,opt,key);
		}
		return th;
	}
	function changeEvt(th,valInput){
		if(!th||th.length==0)return;
		valInput=valInput||th.data('scombo-val');
		if(valInput.val()!=valInput.data('old-val')){
			th.trigger('change',[valInput.val(),valInput.data('old-val')]);
			valInput.data('old-val',valInput.val());
		}
	}
	function parseOption(target){
		var th = $(target),opt={};
		for(var p in $.fn.repscombobox.defaults){
			var val = th.attr(p)+'',dval=$.fn.repscombobox.defaults[p];
			if(th.attr(p)){
				opt[p] = val;
				if(typeof(dval)=='boolean')opt[p]=val=='true';
				else if(typeof(dval)!='string')try{opt[p]=eval(val);}catch(e){;}
			}
		}
		if(!opt.data&&th.attr('tagName')=='SELECT'){
			var ary = opt.data = [];
			$('option',th).each(function(){
				ary.push({id:$(this).val(),text:$(this).text()});
			});
		}
		return opt;
	}
	function dataloadedEvent(){
		var opt=$(this).data('options'),val=$(this).data('scombo-val').val();
		if(typeof(opt.data)=='string'){
			var tmp = opt.data.replace(/([^:]*):([^,]*),?/g,function($0,$1,$2){
				return ',{"'+opt.valueField+'":"'+$1.replace(/"/g,'&#34;')+'","'+opt.textField+'":"'+$2.replace(/"/g,'&#34;')+'"}';
			});
			opt.data=$.parseJSON('['+tmp.replace(/^,+|,+$/g,'')+']');
		}
		for(var i=0;i<opt.data.length;i++){
			if(opt.data[i][opt.valueField]==val){
				$(this).val(opt.data[i][opt.textField]);
				break;
			}
		}
	}
	function validate(target, doit){
		if ($.fn.validatebox){
			var opts = $(target).data('options');
			$(target).validatebox(opts);
			if (doit){
				$(target).validatebox('validate').trigger('mouseleave');
			}
		}
	}
	function makeCenter(div,item){
		div.scrollTop(0);
		if(pos=item.position()){
			div.scrollTop(pos.top-div.height()/2);
		}
	}
	function getVal(exp,defaults){
		try{
			if(typeof(exp)=='function'){
				return parseInt(exp.call(this))||defaults;
			}
			else{
				return parseInt(exp)||defaults;
			}
		}
		catch(e){
			return defaults;
		}
	}
	function fillData(div,opt,key){
		var ary = [];
		for(var i=0;i<opt.data.length;i++){
			if(res=opt.filter(key,opt.data[i])){
				var idx = "";
				text = opt.data[i][opt.textField];
				idx = tostr(text.length,3)+tostr(res.position,4)+tostr(res.length,3);
				if(res.length>0){
					for(var j=0;j<res.length;j++){
						text = text.replace(res[j],'<span class=key>'+res[j]+'</span>');
					}
				}
				ary.push({id:opt.data[i][opt.valueField],text:text,idx:idx});
			}
		}
		for(var i=1;i<ary.length;i++){
			for(var j=0;j<ary.length-i;j++){
				if(ary[j].idx>ary[j+1].idx){
					var tmp = ary[j];
					ary[j]=ary[j+1];ary[j+1]=tmp;
				}
			}
		}
		var htm = '';
		var max = key?Math.min(opt.maxOptions,ary.length):ary.length;
		
		for(var i=0;i<max;i++){
			if(!opt.multiple||ary[i].id){
				htm+='<div class=scombo-item value="'+ary[i].id+'">'+ary[i].text+'</div>';
			}
		}
		div.html(htm).toggleClass('multiple-combo',opt.multiple).scrollTop(0).show();
		if($('.scombo-item:first',div).text()==$('.scombo-item:first>span',div).text()){
			$('.scombo-item:first',div).addClass('hover');
		}
		if(val=div.data('scombo-box').data('scombo-val').val()){
			if(opt.multiple){
				$.each(val.split(opt.separator),function(){
					$('.scombo-item[value="'+this+'"]:first').addClass('selected');
				});
			}
			else{
				$('.scombo-item[value="'+val+'"]:first').addClass('selected');
			}
			makeCenter(div,$('.selected:first',div));
		}
		$('.scombo-item',div).bind('mousedown.sombo',function(){
			var target = $(this).parent().data('scombo-box'),th=$(this),opt=target.data('options');
			if(opt.multiple){
				th.toggleClass('selected');
				var ids=[],texts=[];
				$('.selected',div).each(function(){
					ids.push($(this).attr('value'));
					texts.push($(this).text());
				});
				target.data('scombo-val').val(ids.join(opt.separator));
				target.removeData('keypress').val(texts.join(opt.separator)||'');
			}
			else{
				target.data('scombo-val').val(th.attr('value')||'');
				target.val(th.text()||'');
				target.removeData('keypress');
				$(document).trigger('mousedown',[true]);
			}
			validate(target,true);
			return false;
		}).mouseover(function(){
			$('.hover',div).removeClass('hover');
			$(this).addClass('hover');
		}).mouseout(function(){
			$(this).removeClass('hover');
		});
	}
	function tostr(num,len){
		var str = '00000000000000000000'+num;
		return str.substr(str.length-len);
	}
})(jQuery);/**
 * AJAX Upload ( http://valums.com/ajax-upload/ ) 
 * Copyright (c) Andrew Valums
 * Licensed under the MIT license 
 */
(function () {
    /**
     * Attaches event to a dom element.
     * @param {Element} el
     * @param type event name
     * @param fn callback This refers to the passed element
     */
    function addEvent(el, type, fn){
        if (el.addEventListener) {
            el.addEventListener(type, fn, false);
        } else if (el.attachEvent) {
            el.attachEvent('on' + type, function(){
                fn.call(el);
	        });
	    } else {
            throw new Error('not supported or DOM not loaded');
        }
    }   
    
    /**
     * Attaches resize event to a window, limiting
     * number of event fired. Fires only when encounteres
     * delay of 100 after series of events.
     * 
     * Some browsers fire event multiple times when resizing
     * http://www.quirksmode.org/dom/events/resize.html
     * 
     * @param fn callback This refers to the passed element
     */
    function addResizeEvent(fn){
        var timeout;
               
	    addEvent(window, 'resize', function(){
            if (timeout){
                clearTimeout(timeout);
            }
            timeout = setTimeout(fn, 100);                        
        });
    }    
    
    // Needs more testing, will be rewriten for next version        
    // getOffset function copied from jQuery lib (http://jquery.com/)
    if (document.documentElement.getBoundingClientRect){
        // Get Offset using getBoundingClientRect
        // http://ejohn.org/blog/getboundingclientrect-is-awesome/
        var getOffset = function(el){
            var box = el.getBoundingClientRect();
            var doc = el.ownerDocument;
            var body = doc.body;
            var docElem = doc.documentElement; // for ie 
            var clientTop = docElem.clientTop || body.clientTop || 0;
            var clientLeft = docElem.clientLeft || body.clientLeft || 0;
             
            // In Internet Explorer 7 getBoundingClientRect property is treated as physical,
            // while others are logical. Make all logical, like in IE8.	
            var zoom = 1;            
            if (body.getBoundingClientRect) {
                var bound = body.getBoundingClientRect();
                zoom = (bound.right - bound.left) / body.clientWidth;
            }
            
            if (zoom > 1) {
                clientTop = 0;
                clientLeft = 0;
            }
            
            var top = box.top / zoom + (window.pageYOffset || docElem && docElem.scrollTop / zoom || body.scrollTop / zoom) - clientTop, left = box.left / zoom + (window.pageXOffset || docElem && docElem.scrollLeft / zoom || body.scrollLeft / zoom) - clientLeft;
            
            return {
            	top: $(el).offset().top,
            	left: $(el).offset().left
            }
            
            return {
                top: top,
                left: left
            };
        };        
    } else {
        // Get offset adding all offsets 
        var getOffset = function(el){
            var top = 0, left = 0;
            do {
                top += el.offsetTop || 0;
                left += el.offsetLeft || 0;
                el = el.offsetParent;
            } while (el);
            
            return {
                left: left,
                top: top
            };
        };
    }
    
    /**
     * Returns left, top, right and bottom properties describing the border-box,
     * in pixels, with the top-left relative to the body
     * @param {Element} el
     * @return {Object} Contains left, top, right,bottom
     */
    function getBox(el){
        var left, right, top, bottom;
        var offset = getOffset(el);
        left = offset.left;
        top = offset.top;
        
        right = left + el.offsetWidth;
        bottom = top + el.offsetHeight;
        
        return {
            left: left,
            right: right,
            top: top,
            bottom: bottom
        };
    }
    
    /**
     * Helper that takes object literal
     * and add all properties to element.style
     * @param {Element} el
     * @param {Object} styles
     */
    function addStyles(el, styles){
        for (var name in styles) {
            if (styles.hasOwnProperty(name)) {
                el.style[name] = styles[name];
            }
        }
    }
        
    /**
     * Function places an absolutely positioned
     * element on top of the specified element
     * copying position and dimentions.
     * @param {Element} from
     * @param {Element} to
     */    
    function copyLayout(from, to){
    	// Tim Lu
	    var box = getBox(from);
	    //alert(box.left + '|' + box.top + '|' + from.offsetWidth + '|' + from.offsetHeight);
        
        addStyles(to, {
	        position: 'absolute',                    
	        left : box.left + 'px',
	        top : box.top + 'px',
	        width : from.offsetWidth + 'px',
	        height : from.offsetHeight + 'px'
	        //left : '0px',
	        //top : '0px',
	        //width : '2000px',
	        //height : '2000px'
	    });        
    }

    /**
    * Creates and returns element from html chunk
    * Uses innerHTML to create an element
    */
    var toElement = (function(){
        var div = document.createElement('div');
        return function(html){
            div.innerHTML = html;
            var el = div.firstChild;
            return div.removeChild(el);
        };
    })();
            
    /**
     * Function generates unique id
     * @return unique id 
     */
    var getUID = (function(){
        var id = 0;
        return function(){
            return 'ValumsAjaxUpload' + id++;
        };
    })();        
 
    /**
     * Get file name from path
     * @param {String} file path to file
     * @return filename
     */  
    function fileFromPath(file){
        return file.replace(/.*(\/|\\)/, "");
    }
    
    /**
     * Get file extension lowercase
     * @param {String} file name
     * @return file extenstion
     */    
    function getExt(file){
        return (-1 !== file.indexOf('.')) ? file.replace(/.*[.]/, '') : '';
    }

    function hasClass(el, name){        
        var re = new RegExp('\\b' + name + '\\b');        
        return re.test(el.className);
    }    
    function addClass(el, name){
        if ( ! hasClass(el, name)){   
            el.className += ' ' + name;
        }
    }    
    function removeClass(el, name){
        var re = new RegExp('\\b' + name + '\\b');                
        el.className = el.className.replace(re, '');        
    }
    
    function removeNode(el){
        el.parentNode.removeChild(el);
    }

    /**
     * Easy styling and uploading
     * @constructor
     * @param button An element you want convert to 
     * upload button. Tested dimentions up to 500x500px
     * @param {Object} options See defaults below.
     */
    window.AjaxUpload = function(button, options){
        this._settings = {
        	// Tim Lu
        	id: 'userfileid',
            // Location of the server-side upload script
            action: 'upload.php',
            // File upload name
            name: 'userfile',
            fileType : null,
            size : 0,
            // Select & upload multiple files at once FF3.6+, Chrome 4+
            multiple: false,
            // Additional data to send
            data: {},
            // Submit file as soon as it's selected
            autoSubmit: true,
            // The type of data that you're expecting back from the server.
            // html and xml are detected automatically.
            // Only useful when you are using json data as a response.
            // Set to "json" in that case. 
            responseType: false,
            // Class applied to button when mouse is hovered
            hoverClass: 'hover',
            // Class applied to button when button is focused
            focusClass: 'focus',
            // Class applied to button when AU is disabled
            disabledClass: 'disabled',            
            // When user selects a file, useful with autoSubmit disabled
            // You can return false to cancel upload			
            onChange: function(file, extension){
            },
            // Callback to fire before file is uploaded
            // You can return false to cancel upload
            onSubmit: function(file, extension){
            },
            // Fired when file upload is completed
            // WARNING! DO NOT USE "FALSE" STRING AS A RESPONSE!
            onComplete: function(file, response){
            }
        };
                        
        // Merge the users options with our defaults
        for (var i in options) {
            if (options.hasOwnProperty(i)){
                this._settings[i] = options[i];
            }
        }
                
        // button isn't necessary a dom element
        if (button.jquery){
            // jQuery object was passed
            button = button[0];
        } else if (typeof button == "string") {
            if (/^#.*/.test(button)){
                // If jQuery user passes #elementId don't break it					
                button = button.slice(1);                
            }
            
            button = document.getElementById(button);
        }
        if ( ! button || button.nodeType !== 1){
            throw new Error("Please make sure that you're passing a valid element"); 
        }
                
        if ( button.nodeName.toUpperCase() == 'A'){
            // disable link                       
            addEvent(button, 'click', function(e){
                if (e && e.preventDefault){
                    e.preventDefault();
                } else if (window.event){
                    window.event.returnValue = false;
                }
            });
        }
                    
        // DOM element
        this._button = button;        
        // DOM element                 
        this._input = null;
        // If disabled clicking on button won't do anything
        this._disabled = false;
        
        // if the button was disabled before refresh if will remain
        // disabled in FireFox, let's fix it
        this.enable();        
        
        this._rerouteClicks();
    };
    
    // assigning methods to our class
    AjaxUpload.prototype = {
        setData: function(data){
            this._settings.data = data;
        },
        disable: function(){            
            addClass(this._button, this._settings.disabledClass);
            this._disabled = true;
            
            var nodeName = this._button.nodeName.toUpperCase();            
            if (nodeName == 'INPUT' || nodeName == 'BUTTON'){
                this._button.setAttribute('disabled', 'disabled');
            }            
            
            // hide input
            if (this._input){
                if (this._input.parentNode) {
                    // We use visibility instead of display to fix problem with Safari 4
                    // The problem is that the value of input doesn't change if it 
                    // has display none when user selects a file
                    this._input.parentNode.style.visibility = 'hidden';
                }
            }
        },
        enable: function(){
            removeClass(this._button, this._settings.disabledClass);
            this._button.removeAttribute('disabled');
            this._disabled = false;
            
        },
        /**
         * Creates invisible file input 
         * that will hover above the button
         * <div><input type='file' /></div>
         */
        _createInput: function(){ 
            var self = this;
                        
            var input = document.createElement("input");
            input.setAttribute('type', 'file');
            input.setAttribute('name', this._settings.name);
            // add id property
            // Tim Lu
            input.setAttribute('id', this._settings.id);
            var fType = this._settings.fileType ? this._settings.fileType : null;
            input.setAttribute('onchange', "REPS.fileChange(this,'"+fType+"',"+this._settings.size+");");
            if(this._settings.multiple) input.setAttribute('multiple', 'multiple');
            
            addStyles(input, {
                'position' : 'absolute',
                // in Opera only 'browse' button
                // is clickable and it is located at
                // the right side of the input
                'right' : 0,
                'margin' : 0,
                'padding' : 0,
                'fontSize' : '480px',
                // in Firefox if font-family is set to
                // 'inherit' the input doesn't work
                'fontFamily' : 'sans-serif',
                'cursor' : 'pointer'
            });            

            var div = document.createElement("div");                        
            addStyles(div, {
                'display' : 'block',
                'position' : 'absolute',
                'overflow' : 'hidden',
                'margin' : 0,
                'padding' : 0,                
                'opacity' : 0,
                // Make sure browse button is in the right side
                // in Internet Explorer
                'direction' : 'ltr',
                //Max zIndex supported by Opera 9.0-9.2
                'zIndex': 2147483583
            });
            
            // Make sure that element opacity exists.
            // Otherwise use IE filter            
            if ( div.style.opacity !== "0") {
                if (typeof(div.filters) == 'undefined'){
                    throw new Error('Opacity not supported by the browser');
                }
                div.style.filter = "alpha(opacity=0)";
            }            
            
            addEvent(input, 'change', function(){
                 
                if ( ! input || input.value === ''){                
                    return;                
                }
                            
                // Get filename from input, required                
                // as some browsers have path instead of it          
                var file = fileFromPath(input.value);
                                
                if (false === self._settings.onChange.call(self, file, getExt(file))){
                    self._clearInput();                
                    return;
                }
                
                // Submit form when value is changed
                if (self._settings.autoSubmit) {
                    self.submit();
                }
            });            

            addEvent(input, 'mouseover', function(){
                addClass(self._button, self._settings.hoverClass);
            });
            
            addEvent(input, 'mouseout', function(){
                removeClass(self._button, self._settings.hoverClass);
                removeClass(self._button, self._settings.focusClass);
                
                if (input.parentNode) {
                    // We use visibility instead of display to fix problem with Safari 4
                    // The problem is that the value of input doesn't change if it 
                    // has display none when user selects a file
                    input.parentNode.style.visibility = 'hidden';
                }
            });   
                        
            addEvent(input, 'focus', function(){
                addClass(self._button, self._settings.focusClass);
            });
            
            addEvent(input, 'blur', function(){
                removeClass(self._button, self._settings.focusClass);
            });
            
	        div.appendChild(input);
            document.body.appendChild(div);
              
            this._input = input;
        },
        _clearInput : function(){
            if (!this._input){
                return;
            }            
                             
            // this._input.value = ''; Doesn't work in IE6                               
            removeNode(this._input.parentNode);
            this._input = null;                                                                   
            this._createInput();
            
            removeClass(this._button, this._settings.hoverClass);
            removeClass(this._button, this._settings.focusClass);
        },
        /**
         * Function makes sure that when user clicks upload button,
         * the this._input is clicked instead
         */
        _rerouteClicks: function(){
            var self = this;
            
            // IE will later display 'access denied' error
            // if you use using self._input.click()
            // other browsers just ignore click()

            addEvent(self._button, 'mouseover', function(){
                if (self._disabled){
                    return;
                }
                                
                if ( ! self._input){
	                self._createInput();
                }
                
                var div = self._input.parentNode;                            
                copyLayout(self._button, div);
                div.style.visibility = 'visible';
                                
            });
            
            
            // commented because we now hide input on mouseleave
            /**
             * When the window is resized the elements 
             * can be misaligned if button position depends
             * on window size
             */
            //addResizeEvent(function(){
            //    if (self._input){
            //        copyLayout(self._button, self._input.parentNode);
            //    }
            //});            
                                         
        },
        /**
         * Creates iframe with unique name
         * @return {Element} iframe
         */
        _createIframe: function(){
            // We can't use getTime, because it sometimes return
            // same value in safari :(
            var id = getUID();            
             
            // We can't use following code as the name attribute
            // won't be properly registered in IE6, and new window
            // on form submit will open
            // var iframe = document.createElement('iframe');
            // iframe.setAttribute('name', id);                        
 
            var iframe = toElement('<iframe src="javascript:false;" name="' + id + '" />');
            // src="javascript:false; was added
            // because it possibly removes ie6 prompt 
            // "This page contains both secure and nonsecure items"
            // Anyway, it doesn't do any harm.            
            iframe.setAttribute('id', id);
            
            iframe.style.display = 'none';
            document.body.appendChild(iframe);
            
            return iframe;
        },
        /**
         * Creates form, that will be submitted to iframe
         * @param {Element} iframe Where to submit
         * @return {Element} form
         */
        _createForm: function(iframe){
            var settings = this._settings;
                        
            // We can't use the following code in IE6
            // var form = document.createElement('form');
            // form.setAttribute('method', 'post');
            // form.setAttribute('enctype', 'multipart/form-data');
            // Because in this case file won't be attached to request                    
            var form = toElement('<form method="post" enctype="multipart/form-data"></form>');
                        
            form.setAttribute('action', settings.action);
            form.setAttribute('target', iframe.name);                                   
            form.style.display = 'none';
            document.body.appendChild(form);
            
            // Create hidden input element for each data key
            for (var prop in settings.data) {
                if (settings.data.hasOwnProperty(prop)){
                    var el = document.createElement("input");
                    el.setAttribute('type', 'hidden');
                    el.setAttribute('name', prop);
                    el.setAttribute('value', settings.data[prop]);
                    form.appendChild(el);
                }
            }
            return form;
        },
        /**
         * Gets response from iframe and fires onComplete event when ready
         * @param iframe
         * @param file Filename to use in onComplete callback 
         */
        _getResponse : function(iframe, file){            
            // getting response
            var toDeleteFlag = false, self = this, settings = this._settings;   
               
            addEvent(iframe, 'load', function(){                
                
                if (// For Safari 
                    iframe.src == "javascript:'%3Chtml%3E%3C/html%3E';" ||
                    // For FF, IE
                    iframe.src == "javascript:'<html></html>';"){                                                                        
                        // First time around, do not delete.
                        // We reload to blank page, so that reloading main page
                        // does not re-submit the post.
                        
                        if (toDeleteFlag) {
                            // Fix busy state in FF3
                            setTimeout(function(){
                                removeNode(iframe);
                            }, 0);
                        }
                                                
                        return;
                }
                
                var doc = iframe.contentDocument ? iframe.contentDocument : window.frames[iframe.id].document;
                
                // fixing Opera 9.26,10.00
                if (doc.readyState && doc.readyState != 'complete') {
                   // Opera fires load event multiple times
                   // Even when the DOM is not ready yet
                   // this fix should not affect other browsers
                   return;
                }
                
                // fixing Opera 9.64
                if (doc.body && doc.body.innerHTML == "false") {
                    // In Opera 9.64 event was fired second time
                    // when body.innerHTML changed from false 
                    // to server response approx. after 1 sec
                    return;
                }
                
                var response;
                
                if (doc.XMLDocument) {
                    // response is a xml document Internet Explorer property
                    response = doc.XMLDocument;
                } else if (doc.body){
                    // response is html document or plain text
                    response = doc.body.innerHTML;
                    
                    if (settings.responseType && settings.responseType.toLowerCase() == 'json') {
                        // If the document was sent as 'application/javascript' or
                        // 'text/javascript', then the browser wraps the text in a <pre>
                        // tag and performs html encoding on the contents.  In this case,
                        // we need to pull the original text content from the text node's
                        // nodeValue property to retrieve the unmangled content.
                        // Note that IE6 only understands text/html
                        if (doc.body.firstChild && doc.body.firstChild.nodeName.toUpperCase() == 'PRE') {
                            //doc.normalize();
                            response = doc.body.firstChild.firstChild.nodeValue;
                        }
                        if (response) {
                            response = eval("(" + response + ")");
                        } else {
                            response = {};
                        }
                    }
                } else {
                    // response is a xml document
                    response = doc;
                }
                
                settings.onComplete.call(self, file, response);
                
                // Reload blank page, so that reloading main page
                // does not re-submit the post. Also, remember to
                // delete the frame
                toDeleteFlag = true;
                
                // Fix IE mixed content issue
                iframe.src = "javascript:'<html></html>';";
            });            
        },        
        /**
         * Upload file contained in this._input
         */
        submit: function(){                        
            var self = this, settings = this._settings;
            
            if ( ! this._input || this._input.value === ''){                
                return;                
            }
                                    
            var file = fileFromPath(this._input.value);
            
            // user returned false to cancel upload
            if (false === settings.onSubmit.call(this, file, getExt(file))){
                this._clearInput();                
                return;
            }
            
            // sending request    
            var iframe = this._createIframe();
            var form = this._createForm(iframe);
            
            // assuming following structure
            // div -> input type='file'
            removeNode(this._input.parentNode);            
            removeClass(self._button, self._settings.hoverClass);
            removeClass(self._button, self._settings.focusClass);
                        
            form.appendChild(this._input);
                        
            form.submit();

            // request set, clean up                
            removeNode(form); form = null;                          
            removeNode(this._input); this._input = null;            
            
            // Get response from iframe and fire onComplete event when ready
            this._getResponse(iframe, file);            

            // get ready for next request            
            this._createInput();
        }
    };
    
    $.fn.setupUploader = function(options){
    			var settings = {id:"",path:"",url:"",action:"../../common/upload.mvc",callback:"",flagAbsolute:false,fileType:null,size:0,reName:null,fileName:"",coverage:false,prefixName:"",suffixName:"",contextPath:null};
				var opts = $.extend(settings,options);
    			new AjaxUpload(opts.id, {
	    				name : 'file',
	    				fileType : opts.fileType,
	    				size : opts.size,
	    				data : {path:opts.path,flagAbsolute:opts.flagAbsolute,fileType:opts.fileType,size:opts.size,reName:opts.reName,fileName:opts.fileName,coverage:opts.coverage,prefixName:opts.prefixName,suffixName:opts.suffixName},
	    				action : opts.url || opts.action,
	    				responseType : 'json',
	    				onChange : function(file, extension) {
	    					if(!REPS.containFileType){
	    						messager.info($.regional.messager.containFileType+opts.fileType);
	    						REPS.containFileType = false;
	    						REPS.overFileSizeFlag = 0;
	    						return false;
	    					}
	    					if(REPS.overFileSizeFlag > 0){
	    						messager.info($.regional.messager.overFileSizeFlag + REPS.overFileSizeFlag + "MB");
	    						REPS.overFileSizeFlag = 0;
	    						REPS.containFileType = false;
	    						return false;
	    					}
	    				},
	    				onSubmit : function(file, extension) {
	    					var $loading = $("<img class='loading'>");
	    					var imagePath = (opts.contextPath == null ? "": opts.contextPath) + "/theme/reps/images/loading.gif";
	    					$loading.attr("src", imagePath);
	    					$("#" + opts.id).after($loading);
	    					this.disable();
	    					$("#dialogBackground").css("height",$(document).height());
	    					$("#dialogBackground").show();
	    				},
	    				onComplete : function(file, response) {
	    					$(".loading").remove();
	    					this.enable();
	    					$("#dialogBackground").hide();
	    					var filePath;
	    					var fileSize;
	    					var fileName;
	    					var call;
	    					if(opts.url && opts.callback.length > 0){
	    						call = "var responseCallback = " + opts.callback;
	    						eval(call);
	    						responseCallback(response);
	    						return;
	    					}
	    					if(response.statusCode == REPS.statusCode.ok){
	    						filePath = response.data.filePath;
	    						fileSize = response.data.fileSize;
	    						fileName = response.data.fileName;
	    						var filePathName = filePath.substring(filePath.lastIndexOf("\\")+1);
	    						var rFileType = filePathName.substring(filePathName.lastIndexOf(".")+1);
	    						if(opts.callback.length > 0){
	    							call = "var responseCallback = " + opts.callback;
		    						eval(call);
		    						responseCallback(fileName,rFileType,fileSize,filePath,options.id);
	    						}
	    					}else if(response.statusCode == REPS.statusCode.warn){
	    						messager.message(response, function(){});
	    						return;
	    					}else{
	    						return;
	    					}
	    					
	    					REPS.containFileType = false;
    						REPS.overFileSizeFlag = 0;
	    				}
	    	});
    	}
})(); 
/**
 * @author Roger Wu
 * reference:*.drag.js, *.dialogDrag.js, *.resize.js, *.taskBar.js
 */
(function($){
	$.pdialog = {
		_op:{height:380, width:700, minH:40, minW:50, total:20, max:false, mask:true, resizable:false, drawable:true, maxable:false,minable:false,fresh:true,inIframe:false,okCall:"",cancelCall:"",beforeLoad:"",afterLoad:"",blockId:"",close:true,beforeCall:"function(){return true;}"},
		_current:null,
		_zIndex:42,
		getCurrent:function(){
			return this._current;
		},
		reload:function(url, options){
			var op = $.extend({data:{}, dialogId:"", callback:null}, options);
			var dialog = (op.dialogId && $("body").data(op.dialogId)) || this._current;
			if (dialog){
				var jDContent = dialog.find(".dialogContent");
				jDContent.ajaxUrl({
					type:"POST", url:url, data:op.data, callback:function(response){
						jDContent.find("[layoutH]").layoutH(jDContent);
						$(".pageContent", dialog).width($(dialog).width()-14);
						$(":button.close", dialog).click(function(){
							$.pdialog.close(dialog);
							return false;
						});
						if ($.isFunction(op.callback)) op.callback(response);
					}
				});
			}
		},
		//打开一个层
		open:function(url, dlgid, title, options) {
			var op = $.extend({},$.pdialog._op, options);
			var repsBeforeCall = "var repsBeforeCallBack =" + op.beforeCall;
			eval(repsBeforeCall);
			var flagBefore = repsBeforeCallBack();
			if(!flagBefore){
				return;
			}
			var dialog = $("body").data(dlgid);
			var dialogTemplate='<div id="dialog'+op.id+'" class="dialog" style="top:150px; left:300px;">';
			    dialogTemplate+='  <div class="dialogHeader" onselectstart="return false;" oncopy="return false;" onpaste="return false;" oncut="return false;">';
			    dialogTemplate+='     <div class="dialogHeader_r">';
			    dialogTemplate+='        <div class="dialogHeader_c">';
			    dialogTemplate+='            <a class="close" href="#close">close</a>';
			    dialogTemplate+='            <a class="maximize" href="#maximize">maximize</a>';
			    dialogTemplate+='            <a class="restore" href="#restore">restore</a>';
			    dialogTemplate+='            <h1>弹出窗口</h1>';
			    dialogTemplate+='        </div>';
			    dialogTemplate+='     </div>';
			    dialogTemplate+='  </div>';
			    dialogTemplate+='  <div class="dialogContent layoutBox unitBox"></div>';
			    dialogTemplate+='  <div class="dialogButtons"></div>';
			    dialogTemplate+='  <div class="dialogFooter"><div class="dialogFooter_r"><div class="dialogFooter_c"></div></div></div>';
			    dialogTemplate+='  <div class="resizable_h_l" tar="nw"></div>';
			    dialogTemplate+='  <div class="resizable_h_r" tar="ne"></div>';
			    dialogTemplate+='  <div class="resizable_h_c" tar="n"></div>';
			    dialogTemplate+='  <div class="resizable_c_l" tar="w" style="height:300px;"></div>';
			    dialogTemplate+='  <div class="resizable_c_r" tar="e" style="height:300px;"></div>';
			    dialogTemplate+='  <div class="resizable_f_l" tar="sw"></div>';
			    dialogTemplate+='  <div class="resizable_f_r" tar="se"></div>';
			    dialogTemplate+='  <div class="resizable_f_c" tar="s"></div>';
			    dialogTemplate+='</div>';
				//重复打开一个层
				if(dialog) {
					if(dialog.is(":hidden")) {
						dialog.show();
					}
				} else { 
				$("body").append(dialogTemplate);
				dialog = $(">.dialog:last-child", "body");
				dialog.data("id",dlgid);
				dialog.data("url",url);
				if(op.close) dialog.data("close",op.close);
				if(op.param) dialog.data("param",op.param);
				//不再支持ie6，所以这个针对于ie6的操作就不再做了
				//($.fn.bgiframe && dialog.bgiframe());
				
				dialog.find(".dialogHeader").find("h1").html(title);
				$(dialog).css("zIndex", ($.pdialog._zIndex+=2));
				$("div.shadow").css("zIndex", $.pdialog._zIndex - 3).show();
				
				//buttons controls
				//load data,2014-4-25修改，采用iframe方式加载
				var jDContent = $(".dialogContent",dialog);
				var jBContent = $(".dialogButtons",dialog);
				var jFRContent = $(".resizable_f_r",dialog);
				var appendIframeAndButtons = "<ul>";
				var buttonFlag = false;
				if(700 != op.width){
					jBContent.attr("style","width:"+(op.width-2)+"px;");
				}
				if("" != op.okCall){
					buttonFlag = true;
					appendIframeAndButtons += '<div class="small_btn_save"><input type="button" onClick="var okCallback='+op.okCall+';var reOkCallback = okCallback(); if(reOkCallback != false){ var dialog =$(&quot;#dialog'+op.id+'&quot;); $.pdialog.close(dialog);}" value="保存"></div>';
				}
				if("" != op.cancelCall){
					buttonFlag = true;
					var cancelVal = "关闭";
					if("" != op.okCall){
						cancelVal = "取消";
					}
					appendIframeAndButtons += '<div class="small_btn_cancel"><input type="button" onClick="var cancelCallback='+op.cancelCall+';var reCancelCallback = cancelCallback();if(reCancelCallback != false){ var dialog =$(&quot;#dialog'+op.id+'&quot;); $.pdialog.close(dialog);}" value="'+cancelVal+'" ></div>';
				}
				
				$.pdialog._init(dialog, op, buttonFlag);
				//$(dialog).click(function(){
					//$.pdialog.switchDialog(dialog);
				//});
				
				if(op.resizable)
					dialog.jresize();
				if(op.drawable)
				 	dialog.dialogDrag();
				$("a.close", dialog).click(function(event){ 
					$.pdialog.close(dialog);
					return false;
				});
				if (op.maxable) {
					$("a.maximize", dialog).show().click(function(event){
						$.pdialog.switchDialog(dialog);
						$.pdialog.maxsize(dialog);
						dialog.jresize("destroy").dialogDrag("destroy");
						return false;
					});
				} else {
					$("a.maximize", dialog).hide();
				}
				$("a.restore", dialog).click(function(event){
					$.pdialog.restore(dialog);
					dialog.jresize().dialogDrag();
					return false;
				});
				if (op.minable) {
					$("a.minimize", dialog).show().click(function(event){
						$.pdialog.minimize(dialog);
						return false;
					});
				} else {
					$("a.minimize", dialog).hide();
				}
				$("div.dialogHeader a", dialog).mousedown(function(){
					return false;
				});
				$("div.dialogHeader", dialog).dblclick(function(){
					if($("a.restore",dialog).is(":hidden"))
						$("a.maximize",dialog).trigger("click");
					else
						$("a.restore",dialog).trigger("click");
				});
				if(op.max) {
//					$.pdialog.switchDialog(dialog);
					$.pdialog.maxsize(dialog);
					dialog.jresize("destroy").dialogDrag("destroy");
				}
				$("body").data(dlgid, dialog);
				$.pdialog._current = dialog;
				$.pdialog.attachShadow(dialog);
				
				//appendIframeAndButtons += '</ul></div>';
				var dialogContentHeight = op.height - (buttonFlag ? 40 : 0) - 28;
				var heightPercent = (new Number(dialogContentHeight/jDContent.height())).toFixed(3) * 100 +"%";
				//for blockId
				if(buttonFlag){
					jBContent.html(appendIframeAndButtons);
				}else{
					jBContent.attr("style","display:none;");
				}
				if(op.inIframe){
					if("" != op.beforeLoad){
						$.pdialog.beforeLoad(op.beforeLoad);
					}
					//for iframe
					var iframe = "";
					iframe += '<iframe id="'+op.id+'" name="'+op.id+'" src="'+url+'" style="width:100%;height:'+dialogContentHeight+'px;" frameborder="no" border="0" scrolling="'+(op.scrolling?"auto":"no")+'" marginwidth="0" marginheight="0"></iframe>';
					
					jDContent.html(iframe);
					
					jFRContent.attr("style","bottom:-11px;");
					$("button.close").click(function(){
						$.pdialog.close(dialog);
						return false;
					 });
					
					if("" != op.afterLoad){
						$.pdialog.afterLoad(op.afterLoad);
					}
				}else if (url && url !='undefined'){
					if("" != op.beforeLoad){
						$.pdialog.beforeLoad(op.beforeLoad);
					}
					//for url
					$.ajax({
						type:'GET',
						url:url,
						dataType:"html",
						cache: false,
						success:function(myresult){
							 jDContent.html(myresult);
							 $("button.close").click(function(){
									$.pdialog.close(dialog);
									return false;
								 });
							 if("" != op.afterLoad){
								 $.pdialog.afterLoad(op.afterLoad);
								}
						}
					});
			     }else{
			    	 var content;
			    	 if("" != op.blockId){
			    		 content = $("#"+op.blockId).html();
			    	 }else{
			    		 content = op.blockContent.replaceAll("&qreps;","\"");
			    	 }
		    		 var divContent = "<div class='dialogPageContent' style='height:"+dialogContentHeight+"px;overflow:auto;'>";
					 divContent += content +"</div>";
					
					 jFRContent.attr("style","bottom:-11px;");
					 if("" != op.beforeLoad){
						$.pdialog.beforeLoad(op.beforeLoad);
					 }
					 jDContent.html(divContent);
					 $("button.close").click(function(){
						$.pdialog.close(dialog);
						return false;
					 });
					
					 if("" != op.afterLoad){
						$.pdialog.afterLoad(op.afterLoad);
					 }
			     }
				if (op.mask) {
					$(dialog).css("zIndex", 1000);
					$("a.minimize",dialog).hide();
					$(dialog).data("mask", true);
					$("#dialogBackground").show();
				}
			}
		},
		/**
		 * 加载内容前和后的操作
		 * @param {Object} dialog
		 */
		beforeLoad : function(beforeLoad){
			var reCallBeforeLoadjs = " var reCallBeforeLoad = " + beforeLoad;
			eval(reCallBeforeLoadjs);
			setTimeout(function(){
				reCallBeforeLoad();
			},10);
		},
		afterLoad : function(afterLoad){
			var reCallAfterLoadjs = " var reCallAfterLoad = " + afterLoad;
			eval(reCallAfterLoadjs);
			setTimeout(function(){
				reCallAfterLoad();
			},10);
		},
		/**
		 * 切换当前层
		 * @param {Object} dialog
		 */
		switchDialog:function(dialog) {
			var index = $(dialog).css("zIndex");
			$.pdialog.attachShadow(dialog);
			if($.pdialog._current) {
				var cindex = $($.pdialog._current).css("zIndex");
				$($.pdialog._current).css("zIndex", index);
				$(dialog).css("zIndex", cindex);
				$("div.shadow").css("zIndex", cindex - 1);
				$.pdialog._current = dialog;
			}
			//$.taskBar.switchTask(dialog.data("id"));
		},
		/**
		 * 给当前层附上阴隐层
		 * @param {Object} dialog
		 */
		attachShadow:function(dialog) {
			var shadow = $("div.shadow");
			if(shadow.is(":hidden")) shadow.show();
			shadow.css({
				top: parseInt($(dialog)[0].style.top) - 2,
				left: parseInt($(dialog)[0].style.left) - 4,
				height: parseInt($(dialog).height()) + 8,
				width: parseInt($(dialog).width()) + 8,
				zIndex:parseInt($(dialog).css("zIndex")) - 1
			});
			$(".shadow_c", shadow).children().andSelf().each(function(){
				$(this).css("height", $(dialog).outerHeight() - 4);
			});
		},
		_init:function(dialog, options, buttonFlag) {
			var op = $.extend({}, this._op, options);
			var height = op.height>op.minH?op.height:op.minH;
			var width = op.width>op.minW?op.width:op.minW;
			if(isNaN(dialog.height()) || dialog.height() < height){
				$(dialog).height(height+"px");
				if(buttonFlag){
					$(".dialogContent",dialog).height(height - $(".dialogHeader", dialog).outerHeight() - $(".dialogButtons", dialog).outerHeight()); // the 6 is the class dialogContent padding to
				}else{
					$(".dialogContent",dialog).height(height - $(".dialogHeader", dialog).outerHeight()); 
				}
				
			}
			if(isNaN(dialog.css("width")) || dialog.width() < width) {
				$(dialog).width(width+"px");
			}
			
			var iTop = $(document).scrollTop()+($(window).height()-dialog.height())/2;
			dialog.css({
				left: ($(window).width()-dialog.width())/2,
				top: iTop > 0 ? iTop : 0
			});
		},
		/**
		 * 初始化半透明层
		 * @param {Object} resizable
		 * @param {Object} dialog
		 * @param {Object} target
		 */
		initResize:function(resizable, dialog,target) {
			$("body").css("cursor", target + "-resize");
			resizable.css({
				top: $(dialog).css("top"),
				left: $(dialog).css("left"),
				height:$(dialog).css("height"),
				width:$(dialog).css("width")
			});
			resizable.show();
		},
		/**
		 * 改变阴隐层
		 * @param {Object} target
		 * @param {Object} options
		 */
		repaint:function(target,options){
			var shadow = $("div.shadow");
			if(target != "w" && target != "e") {
				shadow.css("height", shadow.outerHeight() + options.tmove);
				$(".shadow_c", shadow).children().andSelf().each(function(){
					$(this).css("height", $(this).outerHeight() + options.tmove);
				});
			}
			if(target == "n" || target =="nw" || target == "ne") {
				shadow.css("top", options.otop - 2);
			}
			if(options.owidth && (target != "n" || target != "s")) {
				shadow.css("width", options.owidth + 8);
			}
			if(target.indexOf("w") >= 0) {
				shadow.css("left", options.oleft - 4);
			}
		},
		/**
		 * 改变左右拖动层的高度
		 * @param {Object} target
		 * @param {Object} tmove
		 * @param {Object} dialog
		 */
		resizeTool:function(target, tmove, dialog) {
			$("div[class^='resizable']", dialog).filter(function(){
				return $(this).attr("tar") == 'w' || $(this).attr("tar") == 'e';
			}).each(function(){
				$(this).css("height", $(this).outerHeight() + tmove);
			});
		},
		/**
		 * 改变原始层的大小
		 * @param {Object} obj
		 * @param {Object} dialog
		 * @param {Object} target
		 */
		resizeDialog:function(obj, dialog, target) {
			var oleft = parseInt(obj.style.left);
			var otop = parseInt(obj.style.top);
			var height = parseInt(obj.style.height);
			var width = parseInt(obj.style.width);
			if(target == "n" || target == "nw") {
				tmove = parseInt($(dialog).css("top")) - otop;
			} else {
				tmove = height - parseInt($(dialog).css("height"));
			}
			$(dialog).css({left:oleft,width:width,top:otop,height:height});
			$(".dialogContent", dialog).css("width", (width-12) + "px");
			$(".dialogContent", dialog).find(".dialogButtons").css("width", (width-12) + "px");
			$(".pageContent", dialog).css("width", (width-14) + "px");
			if (target != "w" && target != "e") {
				var content = $(".dialogContent", dialog);
				content.css({height:height - $(".dialogHeader", dialog).outerHeight() - $(".dialogFooter", dialog).outerHeight() - 6});
				content.find("[layoutH]").layoutH(content);
				$.pdialog.resizeTool(target, tmove, dialog);
			}
			$.pdialog.repaint(target, {oleft:oleft,otop: otop,tmove: tmove,owidth:width});
			
			$(window).trigger(REPS.eventType.resizeGrid);
		},
		close:function(dialog) {
			if(typeof dialog == 'string') dialog = $("body").data(dialog);
			var close = dialog.data("close");
			var go = true;
			if(close && $.isFunction(close)) {
				var param = dialog.data("param");
				if(param && param != ""){
					param = REPS.jsonEval(param);
					go = close(param);
				} else {
					go = close();
				}
				if(!go) return;
			}
			
			$(dialog).hide();
			$("div.shadow").hide();
			$("#dialogBackground").hide();
			$("body").removeData($(dialog).data("id"));
			$(dialog).trigger(REPS.eventType.pageClear).remove();
		},
		closeCurrent:function(){
			this.close($.pdialog._current);
		},
		checkTimeout:function(){
			var $conetnt = $(".dialogContent", $.pdialog._current);
			var json = REPS.jsonEval($conetnt.html());
			if (json && json.statusCode == REPS.statusCode.timeout) this.closeCurrent();
		},
		maxsize:function(dialog) {
			$(dialog).data("original",{
				top:$(dialog).css("top"),
				left:$(dialog).css("left"),
				width:$(dialog).css("width"),
				height:$(dialog).css("height")
			});
			$("a.maximize",dialog).hide();
			$("a.restore",dialog).show();
			var iContentW = $(window).width();
			var iContentH = $(window).height() - 34;
			$(dialog).css({top:"0px",left:"0px",width:iContentW+"px",height:iContentH+"px"});
			$.pdialog._resizeContent(dialog,iContentW,iContentH);
			$("iframe",dialog).attr("src",$("iframe",dialog).attr("src"));
		},
		restore:function(dialog) {
			var original = $(dialog).data("original");
			var dwidth = parseInt(original.width);
			var dheight = parseInt(original.height);
			$(dialog).css({
				top:original.top,
				left:original.left,
				width:dwidth,
				height:dheight
			});
			$.pdialog._resizeContent(dialog,dwidth,dheight);
			$("a.maximize",dialog).show();
			$("a.restore",dialog).hide();
			$.pdialog.attachShadow(dialog);
		},
		minimize:function(dialog){
			$(dialog).hide();
			$("div.shadow").hide();
		},
		_resizeContent:function(dialog,width,height) {
			var content = $(".dialogContent", dialog);
			content.css({width:(width-12) + "px",height:height - $(".dialogHeader", dialog).outerHeight() - $(".dialogFooter", dialog).outerHeight() - 6});
			content.find("[layoutH]").layoutH(content);
			$(".pageContent", dialog).css("width", (width-14) + "px");
			
			$(window).trigger(REPS.eventType.resizeGrid);
		},
		closeDialog:function(){
			$(".dialogHeader .close").click();
		},
		pdialogClose:function(){
			window.parent.$(".dialogHeader .close").click();
		}
	};
})(jQuery);
/**
 * @author Roger Wu
 */
(function($){
	$.fn.dialogDrag = function(options){
        if (typeof options == 'string') {
                if (options == 'destroy') 
					return this.each(function() {
							var dialog = this;		
							$("div.dialogHeader", dialog).unbind("mousedown");
	                });
        }
		return this.each(function(){
			var dialog = $(this);
			$("div.dialogHeader", dialog).mousedown(function(e){
				$.pdialog.switchDialog(dialog);
				dialog.data("task",true);
				setTimeout(function(){
					if(dialog.data("task"))$.dialogDrag.start(dialog,e);
				},100);
				return false;
			}).mouseup(function(e){
				dialog.data("task",false);
				return false;
			});
		});
	};
	$.dialogDrag = {
		currId:null,
		_init:function(dialog) {
			this.currId = new Date().getTime();
			var dialogProxyTemplate='<div id="dialogProxy" class="dialog dialogProxy">';
			    dialogProxyTemplate+='  <div class="dialogHeader">';
			    dialogProxyTemplate+='      <div class="dialogHeader_r">';
			    dialogProxyTemplate+='          <div class="dialogHeader_c">';
			    dialogProxyTemplate+='              <a class="close" href="#close">close</a>';
			    dialogProxyTemplate+='              <a class="maximize" style="display:none;" href="#maximize">maximize</a>';
			    dialogProxyTemplate+='              <a class="minimize" style="display:none;" href="#minimize">minimize</a>';
			    dialogProxyTemplate+='              <h1></h1>';
			    dialogProxyTemplate+='          </div>';
			    dialogProxyTemplate+='      </div>';
			    dialogProxyTemplate+='  </div>';
			    dialogProxyTemplate+='  <div class="dialogContent"></div>';
			    dialogProxyTemplate+='  <div class="dialogFooter">';
			    dialogProxyTemplate+='     <div class="dialogFooter_r">';
			    dialogProxyTemplate+='          <div class="dialogFooter_c"></div>';
			    dialogProxyTemplate+='     </div>';
			    dialogProxyTemplate+='  </div>';
			    dialogProxyTemplate+='</div>';
			    
			var shadow = $("#dialogProxy");
			if (!shadow.size()) {
				shadow = $(dialogProxyTemplate);
				$("body").append(shadow);
			}
			$("h1", shadow).html($(".dialogHeader h1", dialog).text());
		},
		start:function(dialog,event){
				this._init(dialog);
				var sh = $("#dialogProxy");
				sh.css({
					left: dialog.css("left"),
					top: dialog.css("top"),
					height: dialog.css("height"),
					width: dialog.css("width"),
					zIndex:parseInt(dialog.css("zIndex")) + 1
				}).show();
				$("div.dialogContent",sh).css("height",$("div.dialogContent",dialog).css("height"));
				sh.data("dialog",dialog);
				dialog.css({left:"-10000px",top:"-10000px"});
				$(".shadow").hide();				
				$(sh).jDrag({
					selector:".dialogHeader",
					stop: this.stop,
					event:event
				});
				return false;
		},
		stop:function(){
			var sh = $(arguments[0]);
			var dialog = sh.data("dialog");
			$(dialog).css({left:$(sh).css("left"),top:$(sh).css("top")});
			$.pdialog.attachShadow(dialog);
			$(sh).hide();
		}
	}
})(jQuery);(function($){
 	$.fn.extend({jresize:function(options) {
        if (typeof options == 'string') {
                if (options == 'destroy') 
					return this.each(function() {
							var dialog = this;		
							$("div[class^='resizable']",dialog).each(function() {
								$(this).hide();
							});
	                });
        }
		return this.each(function(){
			var dialog = $(this);			
			var resizable = $(".resizable");
			$("div[class^='resizable']",dialog).each(function() {
				var bar = this;
				$(bar).mousedown(function(event) {
					$.pdialog.switchDialog(dialog);
					$.resizeTool.start(resizable, dialog, event, $(bar).attr("tar"));
					return false;
				}).show();
			});
		});
	}});
	$.resizeTool = {
		start:function(resizable, dialog, e, target) {
			$.pdialog.initResize(resizable, dialog, target);
			$.data(resizable[0], 'layer-drag', {
				options: $.extend($.pdialog._op, {target:target, dialog:dialog,stop:$.resizeTool.stop})
			});
			$.layerdrag.start(resizable[0], e, $.pdialog._op);
		},
		stop:function(){
			var data = $.data(arguments[0], 'layer-drag');
			$.pdialog.resizeDialog(arguments[0], data.options.dialog, data.options.target);
			$("body").css("cursor", "");
			$(arguments[0]).hide();
		}
	};
	$.layerdrag = { 
		start:function(obj, e, options) {
			if (!$.layerdrag.current) {
				$.layerdrag.current = {
					el: obj,
					oleft: parseInt(obj.style.left) || 0,
					owidth: parseInt(obj.style.width) || 0,
					otop: parseInt(obj.style.top) || 0,
					oheight:parseInt(obj.style.height) || 0,
					ox: e.pageX || e.screenX,
					oy: e.pageY || e.clientY
				};
				$(document).bind('mouseup', $.layerdrag.stop);
				$(document).bind('mousemove', $.layerdrag.drag);
			}
			return $.layerdrag.preventEvent(e);
		},
        drag: function(e) {
                if (!e) var e = window.event;
                var current = $.layerdrag.current;
				var data = $.data(current.el, 'layer-drag');
				var lmove = (e.pageX || e.screenX) - current.ox;
				var tmove = (e.pageY || e.clientY) - current.oy;
				if((e.pageY || e.clientY) <= 0 || (e.pageY || e.clientY) >= ($(window).height() - $(".dialogHeader", $(data.options.dialog)).outerHeight())) return false;
				var target = data.options.target;	
				var width = current.owidth;	
				var height = current.oheight;		
				if (target != "n" && target != "s") {
					width += (target.indexOf("w") >= 0)?-lmove:lmove;
				}
				if (width >= $.pdialog._op.minW) {
					if (target.indexOf("w") >= 0) {
						current.el.style.left = (current.oleft + lmove) + 'px';
					}
					if (target != "n" && target != "s") {
						current.el.style.width = width + 'px';
					}
				}
				if (target != "w" && target != "e") {
					height += (target.indexOf("n") >= 0)?-tmove:tmove;
				}
				if (height >= $.pdialog._op.minH) {
					if (target.indexOf("n") >= 0) {
						current.el.style.top = (current.otop + tmove) + 'px';
					}
					if (target != "w" && target != "e") {
						current.el.style.height = height + 'px';
					}
				}
				return $.layerdrag.preventEvent(e);
        },     
        stop: function(e) {
                var current = $.layerdrag.current;
                var data = $.data(current.el, 'layer-drag');
				$(document).unbind('mousemove', $.layerdrag.drag);
				$(document).unbind('mouseup', $.layerdrag.stop);
                if (data.options.stop) {
                        data.options.stop.apply(current.el, [ current.el ]);
                }
                $.layerdrag.current = null;
                $(data.options.dialog).find("iframe").attr("src",$(data.options.dialog).find("iframe").attr("src"));
				return $.layerdrag.preventEvent(e);
        },
		preventEvent:function(e) {
                if (e.stopPropagation) e.stopPropagation();
                if (e.preventDefault) e.preventDefault();
                return false;
		}
	};
})(jQuery);(function($){
	$.fn.jDrag = function(options){
		if (typeof options == 'string') {
			if (options == 'destroy') 
				return this.each(function(){
					$(this).unbind('mousedown', $.rwdrag.start);
					$.data(this, 'pp-rwdrag', null);
				});
		}
		return this.each(function(){
			var el = $(this);
			$.data($.rwdrag, 'pp-rwdrag', {
				options: $.extend({
					el: el,
					obj: el
				}, options)
			});
			if (options.event) 
				$.rwdrag.start(options.event);
			else {
				var select = options.selector;
				$(select, obj).bind('mousedown', $.rwdrag.start);
			}
		});
	};
	$.rwdrag = {
		start: function(e){
			document.onselectstart=function(e){return false};//禁止选择

			var data = $.data(this, 'pp-rwdrag');
			var el = data.options.el[0];
			$.data(el, 'pp-rwdrag', {
				options: data.options
			});
			if (!$.rwdrag.current) {
				$.rwdrag.current = {
					el: el,
					oleft: parseInt(el.style.left) || 0,
					otop: parseInt(el.style.top) || 0,
					ox: e.pageX || e.screenX,
					oy: e.pageY || e.screenY
				};
				$(document).bind("mouseup", $.rwdrag.stop).bind("mousemove", $.rwdrag.drag);
			}
		},
		drag: function(e){
			if (!e)  var e = window.event;
			var current = $.rwdrag.current;
			var data = $.data(current.el, 'pp-rwdrag');
			var left = (current.oleft + (e.pageX || e.clientX) - current.ox);
			var top = (current.otop + (e.pageY || e.clientY) - current.oy);
			if (top < 1) top = 0;
			if (data.options.move == 'horizontal') {
				if ((data.options.minW && left >= $(data.options.obj).cssv("left") + data.options.minW) && (data.options.maxW && left <= $(data.options.obj).cssv("left") + data.options.maxW)) 
					current.el.style.left = left + 'px';
				else if (data.options.scop) {
					if (data.options.relObj) {
						if ((left - parseInt(data.options.relObj.style.left)) > data.options.cellMinW) {
							current.el.style.left = left + 'px';
						}
					} else 
						current.el.style.left = left + 'px';
				}
			} else if (data.options.move == 'vertical') {
					current.el.style.top = top + 'px';
			} else {
				var selector = data.options.selector ? $(data.options.selector, data.options.obj) : $(data.options.obj);
				if (left >= -selector.outerWidth() * 2 / 3 && top >= 0 && (left + selector.outerWidth() / 3 < $(window).width()) && (top + selector.outerHeight() < $(window).height())) {
					current.el.style.left = left + 'px';
					current.el.style.top = top + 'px';
				}
			}
			
			if (data.options.drag) {
				data.options.drag.apply(current.el, [current.el, e]);
			}
			
			return $.rwdrag.preventEvent(e);
		},
		stop: function(e){
			var current = $.rwdrag.current;
			var data = $.data(current.el, 'pp-rwdrag');
			$(document).unbind('mousemove', $.rwdrag.drag).unbind('mouseup', $.rwdrag.stop);
			if (data.options.stop) {
				data.options.stop.apply(current.el, [current.el, e]);
			}
			$.rwdrag.current = null;

			document.onselectstart=function(e){return true};//启用选择
			return $.rwdrag.preventEvent(e);
		},
		preventEvent:function(e){
			if (e.stopPropagation) e.stopPropagation();
			if (e.preventDefault) e.preventDefault();
			return false;			
		}
	};
})(jQuery);
/**
 * @author ZhangHuihua@msn.com
 * 
 */
(function($){
	$.fn.extend({

		/**
		 * options: reverse[true, false], eventType[click, hover], currentIndex[default index 0]
		 * 			stTab[tabs selector], stTabPanel[tab panel selector]
		 * 			ajaxClass[ajax load], closeClass[close tab]
		 */ 
		tabs: function (options){
			var op = $.extend({reverse:false, eventType:"click", currentIndex:0, stTabHeader:"> .tabsHeader", stTab:">.tabsHeaderContent>ul", stTabPanel:"> .tabsContent", ajaxClass:"j-ajax",ajaxIframeClass:"j-iframe-ajax", closeClass:"close", prevClass:"tabsLeft", nextClass:"tabsRight"}, options);
			
			return this.each(function(){
				initTab($(this));
			});
			
			function initTab(jT){
				var jSelector = jT.add($("> *", jT));
				var jTabHeader = $(op.stTabHeader, jSelector);
				var jTabs = $(op.stTab + " li", jTabHeader);
				var jGroups = $(op.stTabPanel + " > *", jSelector);

				jTabs.unbind().find("a").unbind();
				jTabHeader.find("."+op.prevClass).unbind();
				jTabHeader.find("."+op.nextClass).unbind();
				
				jTabs.each(function(iTabIndex){
					if (op.currentIndex == iTabIndex) $(this).addClass("selected");
					else $(this).removeClass("selected");
					
					if (op.eventType == "hover") $(this).hover(function(event){switchTab(jT, iTabIndex)});
					else $(this).click(function(event){switchTab(jT, iTabIndex)});

					$("a", this).each(function(){
						if ($(this).hasClass(op.ajaxClass)) {
							var jGroup = jGroups.eq(iTabIndex);
							if (this.href && !jGroup.attr("loaded")){
								$.ajax({
									type:"GET",
									url : this.href,
									dataType : "html",
									cache:false,
									success:function(result){
										jGroup.html(result);
									}
										
								});	
							jGroup.find("[layoutH]").layoutH();
							jGroup.attr("loaded",true);
							
						} 
							$(this).click(function(event){
								if (this.href && !jGroup.attr("loaded")){
										$.ajax({
											type:"GET",
											url : this.href,
											dataType : "html",
											cache:false,
											success:function(result){
												jGroup.html(result);
											}
												
										});	
									jGroup.find("[layoutH]").layoutH();
									jGroup.attr("loaded",true);
									
								} 
								event.preventDefault();
							});
							
						} else if ($(this).hasClass(op.closeClass)) {
							$(this).click(function(event){
								jTabs.eq(iTabIndex).remove();
								jGroups.eq(iTabIndex).remove();
								if (iTabIndex == op.currentIndex) {
									op.currentIndex = (iTabIndex+1 < jTabs.size()) ? iTabIndex : iTabIndex - 1;
								} else if (iTabIndex < op.currentIndex){
									op.currentIndex = iTabIndex;
								}
								initTab(jT);
								return false;
							});
						} else if ($(this).hasClass(op.ajaxIframeClass)){
							var jGroup = jGroups.eq(iTabIndex);
							jGroup.html('<iframe id="'+$(this).attr("iframeid")+'" src="'+this.href+'" style="width:100%;height:99%;" frameborder="no" border="0" marginwidth="0" marginheight="0"></iframe>');
							$(this).on("click",function(event){
								var jGroup = jGroups.eq(iTabIndex);
								jGroup.html('<iframe id="'+$(this).attr("iframeid")+'" src="'+this.href+'" style="width:100%;height:99%;" frameborder="no" border="0" marginwidth="0" marginheight="0"></iframe>');
								event.preventDefault();
							});
						}
					});
				});

				switchTab(jT, op.currentIndex);
			}
			
			function switchTab(jT, iTabIndex){
				var jSelector = jT.add($("> *", jT));
				var jTabHeader = $(op.stTabHeader, jSelector);
				var jTabs = $(op.stTab + " li", jTabHeader);
				var jGroups = $(op.stTabPanel + " > *", jSelector);
				
				var jTab = jTabs.eq(iTabIndex);
				var jGroup = jGroups.eq(iTabIndex);
				if (op.reverse && (jTab.hasClass("selected") )) {
					jTabs.removeClass("selected");
					jGroups.hide();
				} else {
					op.currentIndex = iTabIndex;
					jTabs.removeClass("selected");
					jTab.addClass("selected");
					
					jGroups.hide().eq(op.currentIndex).show();
				}
				
				if (!jGroup.attr("inited")){
					jGroup.attr("inited", 1000).attr("style",jT.attr("style")).find("input[type=text]").filter("[alt]").inputAlert();
				}
			}
			
		}
	});
})(jQuery);